; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\glib.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\glib.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\glib.crf Source\glib.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  BitmapViewTft16Bit_800600 PROC
                  |L1.0|
;;;485    }
;;;486    void BitmapViewTft16Bit_800600(UINT8T *pBuffer)
000000  e12fff1e          BX       lr
;;;487    {
;;;488        
;;;489    }
;;;490    
                          ENDP

                  _PutTft16Bit_800600 PROC
                  |L1.4|
;;;365    *********************************************************************************************/
;;;366    void _PutTft16Bit_800600(UINT32T x,UINT32T y,UINT32T c)
000004  e52d4004          PUSH     {r4}
;;;367    {
;;;368        if(x<SCR_XSIZE_TFT_800600 && y<SCR_YSIZE_TFT_800600)
000008  e3500d19          CMP      r0,#0x640
00000c  2a000018          BCS      |L1.116|
000010  e3510e4b          CMP      r1,#0x4b0
000014  2a000016          BCS      |L1.116|
;;;369            frameBuffer16BitTft800600[(y)][(x)/2]=( frameBuffer16BitTft800600[(y)][x/2]
000018  e0813181          ADD      r3,r1,r1,LSL #3
00001c  e0833201          ADD      r3,r3,r1,LSL #4
000020  e59fcec8          LDR      r12,|L1.3824|
000024  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer16BitTft800600
000028  e08c3383          ADD      r3,r12,r3,LSL #7
00002c  e1a0c0a0          LSR      r12,r0,#1
000030  e793310c          LDR      r3,[r3,r12,LSL #2]
000034  e1a0cf80          LSL      r12,r0,#31
000038  e1a0cdac          LSR      r12,r12,#27
00003c  e59f4eb0          LDR      r4,|L1.3828|
000040  e1c33c34          BIC      r3,r3,r4,LSR r12
000044  e002c824          AND      r12,r2,r4,LSR #16
000048  e2004001          AND      r4,r0,#1
00004c  e2644001          RSB      r4,r4,#1
000050  e1a04204          LSL      r4,r4,#4
000054  e183341c          ORR      r3,r3,r12,LSL r4
000058  e081c181          ADD      r12,r1,r1,LSL #3
00005c  e08cc201          ADD      r12,r12,r1,LSL #4
000060  e59f4e88          LDR      r4,|L1.3824|
000064  e5944000          LDR      r4,[r4,#0]  ; frameBuffer16BitTft800600
000068  e084c38c          ADD      r12,r4,r12,LSL #7
00006c  e1a040a0          LSR      r4,r0,#1
000070  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.116|
;;;370            & ~(0xffff0000>>((x)%2)*16) ) | ( (c&0x0000ffff)<<((2-1-((x)%2))*16) );
;;;371    }
000074  e49d4004          POP      {r4}
000078  e12fff1e          BX       lr
;;;372    
                          ENDP

                  BitmapViewTft8Bit_800600 PROC
;;;481    }
;;;482    void BitmapViewTft8Bit_800600(UINT8T *pBuffer)
00007c  e12fff1e          BX       lr
;;;483    {
;;;484        
;;;485    }
;;;486    void BitmapViewTft16Bit_800600(UINT8T *pBuffer)
                          ENDP

                  _PutTft8Bit_800600 PROC
;;;347    *********************************************************************************************/
;;;348    void _PutTft8Bit_800600(UINT32T x,UINT32T y,UINT32T c)
000080  e52d4004          PUSH     {r4}
;;;349    {
;;;350        if(x<SCR_XSIZE_TFT_800600 && y<SCR_YSIZE_TFT_800600)
000084  e3500d19          CMP      r0,#0x640
000088  2a000018          BCS      |L1.240|
00008c  e3510e4b          CMP      r1,#0x4b0
000090  2a000016          BCS      |L1.240|
;;;351            frameBuffer8BitTft800600[(y)][(x)/4]=( frameBuffer8BitTft800600[(y)][x/4]
000094  e0813181          ADD      r3,r1,r1,LSL #3
000098  e0833201          ADD      r3,r3,r1,LSL #4
00009c  e59fce54          LDR      r12,|L1.3832|
0000a0  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer8BitTft800600
0000a4  e08c3303          ADD      r3,r12,r3,LSL #6
0000a8  e1a0c120          LSR      r12,r0,#2
0000ac  e793310c          LDR      r3,[r3,r12,LSL #2]
0000b0  e1a0cf00          LSL      r12,r0,#30
0000b4  e1a0cdac          LSR      r12,r12,#27
0000b8  e3a044ff          MOV      r4,#0xff000000
0000bc  e1c33c34          BIC      r3,r3,r4,LSR r12
0000c0  e202c0ff          AND      r12,r2,#0xff
0000c4  e2004003          AND      r4,r0,#3
0000c8  e2644003          RSB      r4,r4,#3
0000cc  e1a04184          LSL      r4,r4,#3
0000d0  e183341c          ORR      r3,r3,r12,LSL r4
0000d4  e081c181          ADD      r12,r1,r1,LSL #3
0000d8  e08cc201          ADD      r12,r12,r1,LSL #4
0000dc  e59f4e14          LDR      r4,|L1.3832|
0000e0  e5944000          LDR      r4,[r4,#0]  ; frameBuffer8BitTft800600
0000e4  e084c30c          ADD      r12,r4,r12,LSL #6
0000e8  e1a04120          LSR      r4,r0,#2
0000ec  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.240|
;;;352            & ~(0xff000000>>((x)%4)*8) ) | ( (c&0x000000ff)<<((4-1-((x)%4))*8) );
;;;353    }
0000f0  e49d4004          POP      {r4}
0000f4  e12fff1e          BX       lr
;;;354    
                          ENDP

                  BitmapViewTft1Bit_800600 PROC
;;;477    }
;;;478    void BitmapViewTft1Bit_800600(UINT8T *pBuffer)
0000f8  e12fff1e          BX       lr
;;;479    {
;;;480        
;;;481    }
;;;482    void BitmapViewTft8Bit_800600(UINT8T *pBuffer)
                          ENDP

                  _PutTft1Bit_800600 PROC
;;;329    *********************************************************************************************/
;;;330    void _PutTft1Bit_800600(UINT32T x,UINT32T y,UINT32T c)
0000fc  e52d4004          PUSH     {r4}
;;;331    {
;;;332        if(x<SCR_XSIZE_TFT_800600 && y<SCR_YSIZE_TFT_800600)
000100  e3500d19          CMP      r0,#0x640
000104  2a000016          BCS      |L1.356|
000108  e3510e4b          CMP      r1,#0x4b0
00010c  2a000014          BCS      |L1.356|
;;;333            frameBuffer1BitTft800600[(y)][(x)/32]=( frameBuffer1BitTft800600[(y)][x/32]
000110  e0813181          ADD      r3,r1,r1,LSL #3
000114  e0833201          ADD      r3,r3,r1,LSL #4
000118  e59fcddc          LDR      r12,|L1.3836|
00011c  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer1BitTft800600
000120  e08c3183          ADD      r3,r12,r3,LSL #3
000124  e1a0c2a0          LSR      r12,r0,#5
000128  e793c10c          LDR      r12,[r3,r12,LSL #2]
00012c  e200301f          AND      r3,r0,#0x1f
000130  e3a04102          MOV      r4,#0x80000000
000134  e1ccc334          BIC      r12,r12,r4,LSR r3
000138  e2024001          AND      r4,r2,#1
00013c  e200301f          AND      r3,r0,#0x1f
000140  e263301f          RSB      r3,r3,#0x1f
000144  e18c3314          ORR      r3,r12,r4,LSL r3
000148  e081c181          ADD      r12,r1,r1,LSL #3
00014c  e08cc201          ADD      r12,r12,r1,LSL #4
000150  e59f4da4          LDR      r4,|L1.3836|
000154  e5944000          LDR      r4,[r4,#0]  ; frameBuffer1BitTft800600
000158  e084c18c          ADD      r12,r4,r12,LSL #3
00015c  e1a042a0          LSR      r4,r0,#5
000160  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.356|
;;;334    	& ~(0x80000000>>((x)%32)*1) ) | ( (c&0x00000001)<< ((32-1-((x)%32))*1) );
;;;335    }
000164  e49d4004          POP      {r4}
000168  e12fff1e          BX       lr
;;;336    
                          ENDP

                  BitmapViewTft24Bit_640480 PROC
;;;473    }
;;;474    void BitmapViewTft24Bit_640480(UINT8T *pBuffer)
00016c  e12fff1e          BX       lr
;;;475    {
;;;476        
;;;477    }
;;;478    void BitmapViewTft1Bit_800600(UINT8T *pBuffer)
                          ENDP

                  _PutTft24Bit_640480 PROC
;;;311    *********************************************************************************************/
;;;312    void _PutTft24Bit_640480(UINT32T x,UINT32T y,UINT32T c)
000170  e52d4004          PUSH     {r4}
;;;313    {
;;;314        if(x<SCR_XSIZE_TFT_640480 && y<SCR_YSIZE_TFT_640480)
000174  e3500c05          CMP      r0,#0x500
000178  2a000008          BCS      |L1.416|
00017c  e3510d0f          CMP      r1,#0x3c0
000180  2a000006          BCS      |L1.416|
;;;315            frameBuffer24BitTft640480[(y)][(x)]=( frameBuffer24BitTft640480[(y)][(x)]
000184  e3c2c0ff          BIC      r12,r2,#0xff
000188  e1a0300c          MOV      r3,r12
00018c  e081c101          ADD      r12,r1,r1,LSL #2
000190  e59f4d68          LDR      r4,|L1.3840|
000194  e5944000          LDR      r4,[r4,#0]  ; frameBuffer24BitTft640480
000198  e084c50c          ADD      r12,r4,r12,LSL #10
00019c  e78c3100          STR      r3,[r12,r0,LSL #2]
                  |L1.416|
;;;316            & (0x0) | ( c&0xffffff00)); // | ( c&0x00ffffff)); LSB 
;;;317    }
0001a0  e49d4004          POP      {r4}
0001a4  e12fff1e          BX       lr
;;;318    
                          ENDP

                  BitmapViewTft16Bit_800480 PROC
;;;454    
;;;455    void BitmapViewTft16Bit_800480(UINT8T *pBuffer)
0001a8  e52d4004          PUSH     {r4}
;;;456    {
;;;457        UINT32T i, j;
;;;458    	UINT32T *pView = (UINT32T*)frameBuffer16BitTft800480;
0001ac  e59fcd50          LDR      r12,|L1.3844|
0001b0  e59c3000          LDR      r3,[r12,#0]  ; frameBuffer16BitTft800480
;;;459    
;;;460    	for (i = 0; i < LCD_YSIZE_TFT_800480; i++)
0001b4  e3a02000          MOV      r2,#0
0001b8  ea000010          B        |L1.512|
                  |L1.444|
;;;461    	{
;;;462    	   for (j = 0; j < LCD_XSIZE_TFT_800480/2 ; j++)
0001bc  e3a01000          MOV      r1,#0
0001c0  ea00000a          B        |L1.496|
                  |L1.452|
;;;463    	    {
;;;464    	      
;;;465    	      pView[j] = ((*(pBuffer+1)) << 24) + ((*(pBuffer)) << 16) + ((*(pBuffer+3)) << 8) + (*(pBuffer+2));
0001c4  e5d0c001          LDRB     r12,[r0,#1]
0001c8  e1a0cc0c          LSL      r12,r12,#24
0001cc  e5d04000          LDRB     r4,[r0,#0]
0001d0  e08cc804          ADD      r12,r12,r4,LSL #16
0001d4  e5d04003          LDRB     r4,[r0,#3]
0001d8  e08cc404          ADD      r12,r12,r4,LSL #8
0001dc  e5d04002          LDRB     r4,[r0,#2]
0001e0  e08cc004          ADD      r12,r12,r4
0001e4  e783c101          STR      r12,[r3,r1,LSL #2]
;;;466    		 
;;;467    		  pBuffer += 4;
0001e8  e2800004          ADD      r0,r0,#4
0001ec  e2811001          ADD      r1,r1,#1              ;462
                  |L1.496|
0001f0  e3510e19          CMP      r1,#0x190             ;462
0001f4  3afffff2          BCC      |L1.452|
;;;468    	    
;;;469    	    }
;;;470    	    pView+=LCD_XSIZE_TFT_800480;
0001f8  e2833d32          ADD      r3,r3,#0xc80
0001fc  e2822001          ADD      r2,r2,#1              ;460
                  |L1.512|
000200  e3520e1e          CMP      r2,#0x1e0             ;460
000204  3affffec          BCC      |L1.444|
;;;471    	}
;;;472       
;;;473    }
000208  e49d4004          POP      {r4}
00020c  e12fff1e          BX       lr
;;;474    void BitmapViewTft24Bit_640480(UINT8T *pBuffer)
                          ENDP

                  _PutTft16Bit_800480 PROC
;;;293    
;;;294    void _PutTft16Bit_800480(UINT32T x,UINT32T y,UINT32T c)
000210  e52d4004          PUSH     {r4}
;;;295    {
;;;296        if(x<SCR_XSIZE_TFT_800480 && y<SCR_YSIZE_TFT_800480)
000214  e3500d19          CMP      r0,#0x640
000218  2a000018          BCS      |L1.640|
00021c  e3510d0f          CMP      r1,#0x3c0
000220  2a000016          BCS      |L1.640|
;;;297          frameBuffer16BitTft800480[(y)][(x)/2]=( frameBuffer16BitTft800480[(y)][x/2]
000224  e0813181          ADD      r3,r1,r1,LSL #3
000228  e0833201          ADD      r3,r3,r1,LSL #4
00022c  e59fccd0          LDR      r12,|L1.3844|
000230  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer16BitTft800480
000234  e08c3383          ADD      r3,r12,r3,LSL #7
000238  e1a0c0a0          LSR      r12,r0,#1
00023c  e793310c          LDR      r3,[r3,r12,LSL #2]
000240  e1a0cf80          LSL      r12,r0,#31
000244  e1a0cdac          LSR      r12,r12,#27
000248  e59f4ca4          LDR      r4,|L1.3828|
00024c  e1c33c34          BIC      r3,r3,r4,LSR r12
000250  e002c824          AND      r12,r2,r4,LSR #16
000254  e2004001          AND      r4,r0,#1
000258  e2644001          RSB      r4,r4,#1
00025c  e1a04204          LSL      r4,r4,#4
000260  e183341c          ORR      r3,r3,r12,LSL r4
000264  e081c181          ADD      r12,r1,r1,LSL #3
000268  e08cc201          ADD      r12,r12,r1,LSL #4
00026c  e59f4c90          LDR      r4,|L1.3844|
000270  e5944000          LDR      r4,[r4,#0]  ; frameBuffer16BitTft800480
000274  e084c38c          ADD      r12,r4,r12,LSL #7
000278  e1a040a0          LSR      r4,r0,#1
00027c  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.640|
;;;298            & ~(0xffff0000>>((x)%2)*16) ) | ( (c&0x0000ffff)<<((2-1-((x)%2))*16) );				 
;;;299    
;;;300    }
000280  e49d4004          POP      {r4}
000284  e12fff1e          BX       lr
;;;301    
                          ENDP

                  BitmapViewTft16Bit_640480 PROC
;;;431    
;;;432    void BitmapViewTft16Bit_640480(UINT8T *pBuffer)
000288  e52d4004          PUSH     {r4}
;;;433    {
;;;434        UINT32T i, j;
;;;435    	UINT32T *pView = (UINT32T*)frameBuffer16BitTft640480;
00028c  e59fcc74          LDR      r12,|L1.3848|
000290  e59c3000          LDR      r3,[r12,#0]  ; frameBuffer16BitTft640480
;;;436    
;;;437    	for (i = 0; i < LCD_YSIZE_TFT_640480; i++)
000294  e3a02000          MOV      r2,#0
000298  ea000010          B        |L1.736|
                  |L1.668|
;;;438    	{
;;;439    	   
;;;440    	   
;;;441    	   for (j = 0; j < LCD_XSIZE_TFT_640480/2 ; j++)
00029c  e3a01000          MOV      r1,#0
0002a0  ea00000a          B        |L1.720|
                  |L1.676|
;;;442    	    {
;;;443    	      
;;;444    	      pView[j] = ((*(pBuffer+3)) << 24) + ((*(pBuffer+2)) << 16) + ((*(pBuffer+1)) << 8) + (*(pBuffer));
0002a4  e5d0c003          LDRB     r12,[r0,#3]
0002a8  e1a0cc0c          LSL      r12,r12,#24
0002ac  e5d04002          LDRB     r4,[r0,#2]
0002b0  e08cc804          ADD      r12,r12,r4,LSL #16
0002b4  e5d04001          LDRB     r4,[r0,#1]
0002b8  e08cc404          ADD      r12,r12,r4,LSL #8
0002bc  e5d04000          LDRB     r4,[r0,#0]
0002c0  e08cc004          ADD      r12,r12,r4
0002c4  e783c101          STR      r12,[r3,r1,LSL #2]
;;;445    		 
;;;446    		  pBuffer += 4;
0002c8  e2800004          ADD      r0,r0,#4
0002cc  e2811001          ADD      r1,r1,#1              ;441
                  |L1.720|
0002d0  e3510d05          CMP      r1,#0x140             ;441
0002d4  3afffff2          BCC      |L1.676|
;;;447    	    
;;;448    	    }
;;;449    	    pView+=LCD_XSIZE_TFT_640480;
0002d8  e2833c0a          ADD      r3,r3,#0xa00
0002dc  e2822001          ADD      r2,r2,#1              ;437
                  |L1.736|
0002e0  e3520e1e          CMP      r2,#0x1e0             ;437
0002e4  3affffec          BCC      |L1.668|
;;;450    	}
;;;451    
;;;452        
;;;453    }
0002e8  e49d4004          POP      {r4}
0002ec  e12fff1e          BX       lr
;;;454    
                          ENDP

                  _PutTft16Bit_640480 PROC
;;;285    *********************************************************************************************/
;;;286    void _PutTft16Bit_640480(UINT32T x,UINT32T y,UINT32T c)
0002f0  e52d4004          PUSH     {r4}
;;;287    {
;;;288        if(x<SCR_XSIZE_TFT_640480 && y<SCR_YSIZE_TFT_640480)
0002f4  e3500c05          CMP      r0,#0x500
0002f8  2a000016          BCS      |L1.856|
0002fc  e3510d0f          CMP      r1,#0x3c0
000300  2a000014          BCS      |L1.856|
;;;289          frameBuffer16BitTft640480[(y)][(x)/2]=( frameBuffer16BitTft640480[(y)][x/2]
000304  e0813101          ADD      r3,r1,r1,LSL #2
000308  e59fcbf8          LDR      r12,|L1.3848|
00030c  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer16BitTft640480
000310  e08c3483          ADD      r3,r12,r3,LSL #9
000314  e1a0c0a0          LSR      r12,r0,#1
000318  e793310c          LDR      r3,[r3,r12,LSL #2]
00031c  e1a0cf80          LSL      r12,r0,#31
000320  e1a0cdac          LSR      r12,r12,#27
000324  e59f4bc8          LDR      r4,|L1.3828|
000328  e1c33c34          BIC      r3,r3,r4,LSR r12
00032c  e002c824          AND      r12,r2,r4,LSR #16
000330  e2004001          AND      r4,r0,#1
000334  e2644001          RSB      r4,r4,#1
000338  e1a04204          LSL      r4,r4,#4
00033c  e183341c          ORR      r3,r3,r12,LSL r4
000340  e081c101          ADD      r12,r1,r1,LSL #2
000344  e59f4bbc          LDR      r4,|L1.3848|
000348  e5944000          LDR      r4,[r4,#0]  ; frameBuffer16BitTft640480
00034c  e084c48c          ADD      r12,r4,r12,LSL #9
000350  e1a040a0          LSR      r4,r0,#1
000354  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.856|
;;;290            & ~(0xffff0000>>((x)%2)*16) ) | ( (c&0x0000ffff)<<((2-1-((x)%2))*16) );				 
;;;291    
;;;292    }
000358  e49d4004          POP      {r4}
00035c  e12fff1e          BX       lr
;;;293    
                          ENDP

                  BitmapViewTft8Bit_640480 PROC
                  |L1.864|
;;;426    }
;;;427    void BitmapViewTft8Bit_640480(UINT8T *pBuffer)
000360  e12fff1e          BX       lr
;;;428    {
;;;429        
;;;430    }
;;;431    
                          ENDP

                  _PutTft8Bit_640480 PROC
                  |L1.868|
;;;268    *********************************************************************************************/
;;;269    void _PutTft8Bit_640480(UINT32T x,UINT32T y,UINT32T c)
000364  e52d4004          PUSH     {r4}
;;;270    {
;;;271        if(x<SCR_XSIZE_TFT_640480 && y<SCR_YSIZE_TFT_640480)
000368  e3500c05          CMP      r0,#0x500
00036c  2a000016          BCS      |L1.972|
000370  e3510d0f          CMP      r1,#0x3c0
000374  2a000014          BCS      |L1.972|
;;;272            frameBuffer8BitTft640480[(y)][(x)/4]=( frameBuffer8BitTft640480[(y)][x/4]
000378  e0813101          ADD      r3,r1,r1,LSL #2
00037c  e59fcb88          LDR      r12,|L1.3852|
000380  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer8BitTft640480
000384  e08c3403          ADD      r3,r12,r3,LSL #8
000388  e1a0c120          LSR      r12,r0,#2
00038c  e793310c          LDR      r3,[r3,r12,LSL #2]
000390  e1a0cf00          LSL      r12,r0,#30
000394  e1a0cdac          LSR      r12,r12,#27
000398  e3a044ff          MOV      r4,#0xff000000
00039c  e1c33c34          BIC      r3,r3,r4,LSR r12
0003a0  e202c0ff          AND      r12,r2,#0xff
0003a4  e2004003          AND      r4,r0,#3
0003a8  e2644003          RSB      r4,r4,#3
0003ac  e1a04184          LSL      r4,r4,#3
0003b0  e183341c          ORR      r3,r3,r12,LSL r4
0003b4  e081c101          ADD      r12,r1,r1,LSL #2
0003b8  e59f4b4c          LDR      r4,|L1.3852|
0003bc  e5944000          LDR      r4,[r4,#0]  ; frameBuffer8BitTft640480
0003c0  e084c40c          ADD      r12,r4,r12,LSL #8
0003c4  e1a04120          LSR      r4,r0,#2
0003c8  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.972|
;;;273            & ~(0xff000000>>((x)%4)*8) ) | ( (c&0x000000ff)<<((4-1-((x)%4))*8) );
;;;274    }
0003cc  e49d4004          POP      {r4}
0003d0  e12fff1e          BX       lr
;;;275    
                          ENDP

                  BitmapViewTft1Bit_640480 PROC
;;;422    }  	
;;;423    void BitmapViewTft1Bit_640480(UINT8T *pBuffer)
0003d4  e12fff1e          BX       lr
;;;424    {
;;;425        
;;;426    }
;;;427    void BitmapViewTft8Bit_640480(UINT8T *pBuffer)
                          ENDP

                  _PutTft1Bit_640480 PROC
;;;251    *********************************************************************************************/
;;;252    void _PutTft1Bit_640480(UINT32T x,UINT32T y,UINT32T c)
0003d8  e52d4004          PUSH     {r4}
;;;253    {
;;;254        if(x<SCR_XSIZE_TFT_640480 && y<SCR_YSIZE_TFT_640480)
0003dc  e3500c05          CMP      r0,#0x500
0003e0  2a000014          BCS      |L1.1080|
0003e4  e3510d0f          CMP      r1,#0x3c0
0003e8  2a000012          BCS      |L1.1080|
;;;255            frameBuffer1BitTft640480[(y)][(x)/32]=( frameBuffer1BitTft640480[(y)][x/32]
0003ec  e0813101          ADD      r3,r1,r1,LSL #2
0003f0  e59fcb18          LDR      r12,|L1.3856|
0003f4  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer1BitTft640480
0003f8  e08c3283          ADD      r3,r12,r3,LSL #5
0003fc  e1a0c2a0          LSR      r12,r0,#5
000400  e793c10c          LDR      r12,[r3,r12,LSL #2]
000404  e200301f          AND      r3,r0,#0x1f
000408  e3a04102          MOV      r4,#0x80000000
00040c  e1ccc334          BIC      r12,r12,r4,LSR r3
000410  e2024001          AND      r4,r2,#1
000414  e200301f          AND      r3,r0,#0x1f
000418  e263301f          RSB      r3,r3,#0x1f
00041c  e18c3314          ORR      r3,r12,r4,LSL r3
000420  e081c101          ADD      r12,r1,r1,LSL #2
000424  e59f4ae4          LDR      r4,|L1.3856|
000428  e5944000          LDR      r4,[r4,#0]  ; frameBuffer1BitTft640480
00042c  e084c28c          ADD      r12,r4,r12,LSL #5
000430  e1a042a0          LSR      r4,r0,#5
000434  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.1080|
;;;256    	& ~(0x80000000>>((x)%32)*1) ) | ( (c&0x00000001)<< ((32-1-((x)%32))*1) );
;;;257    }
000438  e49d4004          POP      {r4}
00043c  e12fff1e          BX       lr
;;;258    
                          ENDP

                  BitmapViewTft16Bit_240320 PROC
                  |L1.1088|
;;;418    }
;;;419    void BitmapViewTft16Bit_240320(UINT8T *pBuffer)
000440  e12fff1e          BX       lr
;;;420    {
;;;421        
;;;422    }  	
;;;423    void BitmapViewTft1Bit_640480(UINT8T *pBuffer)
                          ENDP

                  _PutTft16Bit_240320 PROC
                  |L1.1092|
;;;234    *********************************************************************************************/
;;;235    void _PutTft16Bit_240320(UINT32T x,UINT32T y,UINT32T c)
000444  e52d4004          PUSH     {r4}
;;;236    {
;;;237        if(x<SCR_XSIZE_TFT_240320 && y<SCR_YSIZE_TFT_240320)
000448  e3500e1e          CMP      r0,#0x1e0
00044c  2a000016          BCS      |L1.1196|
000450  e3510d0a          CMP      r1,#0x280
000454  2a000014          BCS      |L1.1196|
;;;238            frameBuffer16BitTft240320[(y)][(x)/2]=( frameBuffer16BitTft240320[(y)][x/2]
000458  e0613201          RSB      r3,r1,r1,LSL #4
00045c  e59fcab0          LDR      r12,|L1.3860|
000460  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer16BitTft240320
000464  e08c3303          ADD      r3,r12,r3,LSL #6
000468  e1a0c0a0          LSR      r12,r0,#1
00046c  e793310c          LDR      r3,[r3,r12,LSL #2]
000470  e1a0cf80          LSL      r12,r0,#31
000474  e1a0cdac          LSR      r12,r12,#27
000478  e59f4a74          LDR      r4,|L1.3828|
00047c  e1c33c34          BIC      r3,r3,r4,LSR r12
000480  e002c824          AND      r12,r2,r4,LSR #16
000484  e2004001          AND      r4,r0,#1
000488  e2644001          RSB      r4,r4,#1
00048c  e1a04204          LSL      r4,r4,#4
000490  e183341c          ORR      r3,r3,r12,LSL r4
000494  e061c201          RSB      r12,r1,r1,LSL #4
000498  e59f4a74          LDR      r4,|L1.3860|
00049c  e5944000          LDR      r4,[r4,#0]  ; frameBuffer16BitTft240320
0004a0  e084c30c          ADD      r12,r4,r12,LSL #6
0004a4  e1a040a0          LSR      r4,r0,#1
0004a8  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.1196|
;;;239            & ~(0xffff0000>>((x)%2)*16) ) | ( (c&0x0000ffff)<<((2-1-((x)%2))*16) );
;;;240    }
0004ac  e49d4004          POP      {r4}
0004b0  e12fff1e          BX       lr
;;;241    
                          ENDP

                  BitmapViewTft8Bit_240320 PROC
;;;414    }
;;;415    void BitmapViewTft8Bit_240320(UINT8T *pBuffer)
0004b4  e12fff1e          BX       lr
;;;416    {
;;;417        
;;;418    }
;;;419    void BitmapViewTft16Bit_240320(UINT8T *pBuffer)
                          ENDP

                  _PutTft8Bit_240320 PROC
;;;217    *********************************************************************************************/
;;;218    void _PutTft8Bit_240320(UINT32T x,UINT32T y,UINT32T c)
0004b8  e52d4004          PUSH     {r4}
;;;219    {
;;;220        if(x<SCR_XSIZE_TFT_240320 && y<SCR_YSIZE_TFT_240320)
0004bc  e3500e1e          CMP      r0,#0x1e0
0004c0  2a000016          BCS      |L1.1312|
0004c4  e3510d0a          CMP      r1,#0x280
0004c8  2a000014          BCS      |L1.1312|
;;;221            frameBuffer8BitTft240320[(y)][(x)/4]=( frameBuffer8BitTft240320[(y)][x/4]
0004cc  e0613201          RSB      r3,r1,r1,LSL #4
0004d0  e59fca40          LDR      r12,|L1.3864|
0004d4  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer8BitTft240320
0004d8  e08c3283          ADD      r3,r12,r3,LSL #5
0004dc  e1a0c120          LSR      r12,r0,#2
0004e0  e793310c          LDR      r3,[r3,r12,LSL #2]
0004e4  e1a0cf00          LSL      r12,r0,#30
0004e8  e1a0cdac          LSR      r12,r12,#27
0004ec  e3a044ff          MOV      r4,#0xff000000
0004f0  e1c33c34          BIC      r3,r3,r4,LSR r12
0004f4  e202c0ff          AND      r12,r2,#0xff
0004f8  e2004003          AND      r4,r0,#3
0004fc  e2644003          RSB      r4,r4,#3
000500  e1a04184          LSL      r4,r4,#3
000504  e183341c          ORR      r3,r3,r12,LSL r4
000508  e061c201          RSB      r12,r1,r1,LSL #4
00050c  e59f4a04          LDR      r4,|L1.3864|
000510  e5944000          LDR      r4,[r4,#0]  ; frameBuffer8BitTft240320
000514  e084c28c          ADD      r12,r4,r12,LSL #5
000518  e1a04120          LSR      r4,r0,#2
00051c  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.1312|
;;;222            & ~(0xff000000>>((x)%4)*8) ) | ( (c&0x000000ff)<<((4-1-((x)%4))*8) );
;;;223    }
000520  e49d4004          POP      {r4}
000524  e12fff1e          BX       lr
;;;224    
                          ENDP

                  BitmapViewCstn12Bit PROC
;;;410    }
;;;411    void BitmapViewCstn12Bit(UINT8T *pBuffer)
000528  e12fff1e          BX       lr
;;;412    {
;;;413        
;;;414    }
;;;415    void BitmapViewTft8Bit_240320(UINT8T *pBuffer)
                          ENDP

                  _PutCstn12Bit PROC
;;;176    *********************************************************************************************/
;;;177    void _PutCstn12Bit(UINT32T x,UINT32T y,UINT32T c)
00052c  e92d47f0          PUSH     {r4-r10,lr}
;;;178    {
000530  e1a04000          MOV      r4,r0
000534  e1a05001          MOV      r5,r1
000538  e1a06002          MOV      r6,r2
;;;179        UINT32T z;
;;;180        z=((x)%8);
00053c  e2047007          AND      r7,r4,#7
;;;181        if(x<SCR_XSIZE_CSTN&& y<SCR_YSIZE_CSTN)
000540  e3540d0a          CMP      r4,#0x280
000544  2a000079          BCS      |L1.1840|
000548  e3550e1e          CMP      r5,#0x1e0
00054c  2a000077          BCS      |L1.1840|
;;;182        {
;;;183    
;;;184            if((z%3)!=2)
000550  e3a01003          MOV      r1,#3
000554  e1a00007          MOV      r0,r7
000558  ebfffffe          BL       __aeabi_uidivmod
00055c  e3510002          CMP      r1,#2
000560  0a000027          BEQ      |L1.1540|
;;;185                frameBuffer12Bit[(y)][(x)*3/8]=
000564  e3a01003          MOV      r1,#3
000568  e1a00007          MOV      r0,r7
00056c  ebfffffe          BL       __aeabi_uidivmod
000570  e1a08100          LSL      r8,r0,#2
000574  e3a01003          MOV      r1,#3
000578  e1a00007          MOV      r0,r7
00057c  ebfffffe          BL       __aeabi_uidivmod
000580  e0810081          ADD      r0,r1,r1,LSL #1
000584  e0880100          ADD      r0,r8,r0,LSL #2
000588  e59f198c          LDR      r1,|L1.3868|
00058c  e1a00031          LSR      r0,r1,r0
000590  e0651205          RSB      r1,r5,r5,LSL #4
000594  e59f2984          LDR      r2,|L1.3872|
000598  e5922000          LDR      r2,[r2,#0]  ; frameBuffer12Bit
00059c  e0821301          ADD      r1,r2,r1,LSL #6
0005a0  e0842084          ADD      r2,r4,r4,LSL #1
0005a4  e1a021a2          LSR      r2,r2,#3
0005a8  e7911102          LDR      r1,[r1,r2,LSL #2]
0005ac  e1c18000          BIC      r8,r1,r0
0005b0  e3a01003          MOV      r1,#3
0005b4  e1a00007          MOV      r0,r7
0005b8  ebfffffe          BL       __aeabi_uidivmod
0005bc  e1a09100          LSL      r9,r0,#2
0005c0  e3a01003          MOV      r1,#3
0005c4  e1a00007          MOV      r0,r7
0005c8  ebfffffe          BL       __aeabi_uidivmod
0005cc  e0810081          ADD      r0,r1,r1,LSL #1
0005d0  e0890100          ADD      r0,r9,r0,LSL #2
0005d4  e2600014          RSB      r0,r0,#0x14
0005d8  e1a01a06          LSL      r1,r6,#20
0005dc  e1a01a21          LSR      r1,r1,#20
0005e0  e1880011          ORR      r0,r8,r1,LSL r0
0005e4  e0651205          RSB      r1,r5,r5,LSL #4
0005e8  e59f2930          LDR      r2,|L1.3872|
0005ec  e5922000          LDR      r2,[r2,#0]  ; frameBuffer12Bit
0005f0  e0821301          ADD      r1,r2,r1,LSL #6
0005f4  e0842084          ADD      r2,r4,r4,LSL #1
0005f8  e1a021a2          LSR      r2,r2,#3
0005fc  e7810102          STR      r0,[r1,r2,LSL #2]
000600  ea00004a          B        |L1.1840|
                  |L1.1540|
;;;186                ( frameBuffer12Bit[(y)][(x)*3/8] & ~(0xfff00000>>(((z/3)*4)+((z)%3)*12) )
;;;187    		| ( (c&0xfff)<<(20-(((z/3)*4)+((z)%3)*12))) );
;;;188            else
;;;189            {
;;;190                if(z==2)
000604  e3570002          CMP      r7,#2
000608  1a000023          BNE      |L1.1692|
;;;191                {
;;;192                    frameBuffer12Bit[(y)][(x)*3/8]=( (frameBuffer12Bit[(y)][(x)*3/8]
00060c  e0650205          RSB      r0,r5,r5,LSL #4
000610  e59f1908          LDR      r1,|L1.3872|
000614  e5911000          LDR      r1,[r1,#0]  ; frameBuffer12Bit
000618  e0810300          ADD      r0,r1,r0,LSL #6
00061c  e0841084          ADD      r1,r4,r4,LSL #1
000620  e1a011a1          LSR      r1,r1,#3
000624  e7900101          LDR      r0,[r0,r1,LSL #2]
000628  e3c000ff          BIC      r0,r0,#0xff
00062c  e2061eff          AND      r1,r6,#0xff0
000630  e1800221          ORR      r0,r0,r1,LSR #4
000634  e0651205          RSB      r1,r5,r5,LSL #4
000638  e59f28e0          LDR      r2,|L1.3872|
00063c  e5922000          LDR      r2,[r2,#0]  ; frameBuffer12Bit
000640  e0821301          ADD      r1,r2,r1,LSL #6
000644  e0842084          ADD      r2,r4,r4,LSL #1
000648  e1a021a2          LSR      r2,r2,#3
00064c  e7810102          STR      r0,[r1,r2,LSL #2]
;;;193                    								& ~(0xff)) | ((c&0xff0)>>4)  ); 
;;;194                    frameBuffer12Bit[(y)][((x)*3/8)+1]=( (frameBuffer12Bit[(y)][((x)*3/8)+1]
000650  e0650205          RSB      r0,r5,r5,LSL #4
000654  e59f18c4          LDR      r1,|L1.3872|
000658  e5911000          LDR      r1,[r1,#0]  ; frameBuffer12Bit
00065c  e0810300          ADD      r0,r1,r0,LSL #6
000660  e0841084          ADD      r1,r4,r4,LSL #1
000664  e3a02001          MOV      r2,#1
000668  e08211a1          ADD      r1,r2,r1,LSR #3
00066c  e7900101          LDR      r0,[r0,r1,LSL #2]
000670  e3c0020f          BIC      r0,r0,#0xf0000000
000674  e1800e06          ORR      r0,r0,r6,LSL #28
000678  e0651205          RSB      r1,r5,r5,LSL #4
00067c  e59f289c          LDR      r2,|L1.3872|
000680  e5922000          LDR      r2,[r2,#0]  ; frameBuffer12Bit
000684  e0821301          ADD      r1,r2,r1,LSL #6
000688  e0842084          ADD      r2,r4,r4,LSL #1
00068c  e3a03001          MOV      r3,#1
000690  e08321a2          ADD      r2,r3,r2,LSR #3
000694  e7810102          STR      r0,[r1,r2,LSL #2]
000698  ea000024          B        |L1.1840|
                  |L1.1692|
;;;195    		    										& ~(0xf0000000)) | ((c&0xf)<<28)  );
;;;196               }   
;;;197                else if(z==5)
00069c  e3570005          CMP      r7,#5
0006a0  1a000022          BNE      |L1.1840|
;;;198                {
;;;199                    frameBuffer12Bit[(y)][(x)*3/8]=( (frameBuffer12Bit[(y)][(x)*3/8]
0006a4  e0650205          RSB      r0,r5,r5,LSL #4
0006a8  e59f1870          LDR      r1,|L1.3872|
0006ac  e5911000          LDR      r1,[r1,#0]  ; frameBuffer12Bit
0006b0  e0810300          ADD      r0,r1,r0,LSL #6
0006b4  e0841084          ADD      r1,r4,r4,LSL #1
0006b8  e1a011a1          LSR      r1,r1,#3
0006bc  e7900101          LDR      r0,[r0,r1,LSL #2]
0006c0  e3c0000f          BIC      r0,r0,#0xf
0006c4  e2061c0f          AND      r1,r6,#0xf00
0006c8  e1800421          ORR      r0,r0,r1,LSR #8
0006cc  e0651205          RSB      r1,r5,r5,LSL #4
0006d0  e59f2848          LDR      r2,|L1.3872|
0006d4  e5922000          LDR      r2,[r2,#0]  ; frameBuffer12Bit
0006d8  e0821301          ADD      r1,r2,r1,LSL #6
0006dc  e0842084          ADD      r2,r4,r4,LSL #1
0006e0  e1a021a2          LSR      r2,r2,#3
0006e4  e7810102          STR      r0,[r1,r2,LSL #2]
;;;200    	            & ~(0xf)) | ((c&0xf00)>>8)  );
;;;201                    frameBuffer12Bit[(y)][((x)*3/8)+1]=( (frameBuffer12Bit[(y)][((x)*3/8)+1]
0006e8  e0650205          RSB      r0,r5,r5,LSL #4
0006ec  e59f182c          LDR      r1,|L1.3872|
0006f0  e5911000          LDR      r1,[r1,#0]  ; frameBuffer12Bit
0006f4  e0810300          ADD      r0,r1,r0,LSL #6
0006f8  e0841084          ADD      r1,r4,r4,LSL #1
0006fc  e3a02001          MOV      r2,#1
000700  e08211a1          ADD      r1,r2,r1,LSR #3
000704  e7900101          LDR      r0,[r0,r1,LSL #2]
000708  e3c004ff          BIC      r0,r0,#0xff000000
00070c  e1800c06          ORR      r0,r0,r6,LSL #24
000710  e0651205          RSB      r1,r5,r5,LSL #4
000714  e59f2804          LDR      r2,|L1.3872|
000718  e5922000          LDR      r2,[r2,#0]  ; frameBuffer12Bit
00071c  e0821301          ADD      r1,r2,r1,LSL #6
000720  e0842084          ADD      r2,r4,r4,LSL #1
000724  e3a03001          MOV      r3,#1
000728  e08321a2          ADD      r2,r3,r2,LSR #3
00072c  e7810102          STR      r0,[r1,r2,LSL #2]
                  |L1.1840|
;;;202    	            & ~(0xff000000)) | ((c&0xff)<<24)  );
;;;203               }   
;;;204           }
;;;205       }
;;;206    }
000730  e8bd47f0          POP      {r4-r10,lr}
000734  e12fff1e          BX       lr
;;;207    
                          ENDP

                  BitmapViewCstn8Bit PROC
                  |L1.1848|
;;;394    *********************************************************************************************/
;;;395    void BitmapViewCstn8Bit(UINT8T *pBuffer)
000738  e52d4004          PUSH     {r4}
;;;396    {
;;;397        UINT32T i, j;
;;;398    	UINT32T *pView = (UINT32T*)frameBuffer8Bit;
00073c  e59fc7e0          LDR      r12,|L1.3876|
000740  e59c3000          LDR      r3,[r12,#0]  ; frameBuffer8Bit
;;;399    
;;;400    	for (i = 0; i < SCR_YSIZE_STN; i++)
000744  e3a02000          MOV      r2,#0
000748  ea000010          B        |L1.1936|
                  |L1.1868|
;;;401    	{
;;;402    	    for (j = 0; j < LCD_XSIZE_STN/4; j++)
00074c  e3a01000          MOV      r1,#0
000750  ea00000a          B        |L1.1920|
                  |L1.1876|
;;;403    	    {
;;;404    		pView[j] = ((*pBuffer) << 24) + ((*(pBuffer+1)) << 16) + ((*(pBuffer+2)) << 8) + (*(pBuffer+3));
000754  e5d0c000          LDRB     r12,[r0,#0]
000758  e1a0cc0c          LSL      r12,r12,#24
00075c  e5d04001          LDRB     r4,[r0,#1]
000760  e08cc804          ADD      r12,r12,r4,LSL #16
000764  e5d04002          LDRB     r4,[r0,#2]
000768  e08cc404          ADD      r12,r12,r4,LSL #8
00076c  e5d04003          LDRB     r4,[r0,#3]
000770  e08cc004          ADD      r12,r12,r4
000774  e783c101          STR      r12,[r3,r1,LSL #2]
;;;405    		pBuffer += 4;
000778  e2800004          ADD      r0,r0,#4
00077c  e2811001          ADD      r1,r1,#1              ;402
                  |L1.1920|
000780  e3510050          CMP      r1,#0x50              ;402
000784  3afffff2          BCC      |L1.1876|
;;;406    	   }
;;;407    	    pView+=SCR_XSIZE_STN/4;
000788  e2833d0a          ADD      r3,r3,#0x280
00078c  e2822001          ADD      r2,r2,#1              ;400
                  |L1.1936|
000790  e3520e1e          CMP      r2,#0x1e0             ;400
000794  3affffec          BCC      |L1.1868|
;;;408    	}
;;;409    
;;;410    }
000798  e49d4004          POP      {r4}
00079c  e12fff1e          BX       lr
;;;411    void BitmapViewCstn12Bit(UINT8T *pBuffer)
                          ENDP

                  _PutCstn8Bit PROC
                  |L1.1952|
;;;159    *********************************************************************************************/
;;;160    void _PutCstn8Bit(UINT32T x,UINT32T y,UINT32T c)
0007a0  e52d4004          PUSH     {r4}
;;;161    {
;;;162        if(x<SCR_XSIZE_CSTN&& y<SCR_YSIZE_CSTN)
0007a4  e3500d0a          CMP      r0,#0x280
0007a8  2a000016          BCS      |L1.2056|
0007ac  e3510e1e          CMP      r1,#0x1e0
0007b0  2a000014          BCS      |L1.2056|
;;;163            frameBuffer8Bit[(y)][(x)/4]=( frameBuffer8Bit[(y)][x/4]
0007b4  e0813101          ADD      r3,r1,r1,LSL #2
0007b8  e59fc764          LDR      r12,|L1.3876|
0007bc  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer8Bit
0007c0  e08c3383          ADD      r3,r12,r3,LSL #7
0007c4  e1a0c120          LSR      r12,r0,#2
0007c8  e793310c          LDR      r3,[r3,r12,LSL #2]
0007cc  e1a0cf00          LSL      r12,r0,#30
0007d0  e1a0cdac          LSR      r12,r12,#27
0007d4  e3a044ff          MOV      r4,#0xff000000
0007d8  e1c33c34          BIC      r3,r3,r4,LSR r12
0007dc  e202c0ff          AND      r12,r2,#0xff
0007e0  e2004003          AND      r4,r0,#3
0007e4  e2644003          RSB      r4,r4,#3
0007e8  e1a04184          LSL      r4,r4,#3
0007ec  e183341c          ORR      r3,r3,r12,LSL r4
0007f0  e081c101          ADD      r12,r1,r1,LSL #2
0007f4  e59f4728          LDR      r4,|L1.3876|
0007f8  e5944000          LDR      r4,[r4,#0]  ; frameBuffer8Bit
0007fc  e084c38c          ADD      r12,r4,r12,LSL #7
000800  e1a04120          LSR      r4,r0,#2
000804  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.2056|
;;;164    	    & ~(0xff000000>>((x)%4)*8) ) | ( (c&0x000000ff)<<((4-1-((x)%4))*8) );
;;;165    }
000808  e49d4004          POP      {r4}
00080c  e12fff1e          BX       lr
;;;166    
                          ENDP

                  BitmapViewStn4Bit PROC
                  |L1.2064|
;;;381    }
;;;382    void BitmapViewStn4Bit(UINT8T *pBuffer)
000810  e12fff1e          BX       lr
;;;383    {
;;;384    
;;;385    }
;;;386    
                          ENDP

                  _PutStn4Bit PROC
                  |L1.2068|
;;;142    *********************************************************************************************/
;;;143    void _PutStn4Bit(UINT32T x,UINT32T y,UINT32T c)
000814  e52d4004          PUSH     {r4}
;;;144    {
;;;145        if(x<SCR_XSIZE_STN&& y<SCR_YSIZE_STN)
000818  e3500d0a          CMP      r0,#0x280
00081c  2a000016          BCS      |L1.2172|
000820  e3510e1e          CMP      r1,#0x1e0
000824  2a000014          BCS      |L1.2172|
;;;146            frameBuffer4Bit[(y)][(x)/8]=( frameBuffer4Bit[(y)][x/8]
000828  e0813101          ADD      r3,r1,r1,LSL #2
00082c  e59fc6f4          LDR      r12,|L1.3880|
000830  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer4Bit
000834  e08c3303          ADD      r3,r12,r3,LSL #6
000838  e1a0c1a0          LSR      r12,r0,#3
00083c  e793310c          LDR      r3,[r3,r12,LSL #2]
000840  e1a0ce80          LSL      r12,r0,#29
000844  e1a0cdac          LSR      r12,r12,#27
000848  e3a0420f          MOV      r4,#0xf0000000
00084c  e1c33c34          BIC      r3,r3,r4,LSR r12
000850  e202c00f          AND      r12,r2,#0xf
000854  e2004007          AND      r4,r0,#7
000858  e2644007          RSB      r4,r4,#7
00085c  e1a04104          LSL      r4,r4,#2
000860  e183341c          ORR      r3,r3,r12,LSL r4
000864  e081c101          ADD      r12,r1,r1,LSL #2
000868  e59f46b8          LDR      r4,|L1.3880|
00086c  e5944000          LDR      r4,[r4,#0]  ; frameBuffer4Bit
000870  e084c30c          ADD      r12,r4,r12,LSL #6
000874  e1a041a0          LSR      r4,r0,#3
000878  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.2172|
;;;147    	& ~(0xf0000000>>((x)%8)*4) ) | ( (c&0x0000000f)<<((8-1-((x)%8))*4) );
;;;148    }
00087c  e49d4004          POP      {r4}
000880  e12fff1e          BX       lr
;;;149    
                          ENDP

                  BitmapViewStn2Bit PROC
                  |L1.2180|
;;;377    }
;;;378    void BitmapViewStn2Bit(UINT8T *pBuffer)
000884  e12fff1e          BX       lr
;;;379    {
;;;380        
;;;381    }
;;;382    void BitmapViewStn4Bit(UINT8T *pBuffer)
                          ENDP

                  _PutStn2Bit PROC
                  |L1.2184|
;;;125    *********************************************************************************************/
;;;126    void _PutStn2Bit(UINT32T x,UINT32T y,UINT32T c)
000888  e52d4004          PUSH     {r4}
;;;127    {
;;;128        if(x<SCR_XSIZE_STN&& y<SCR_YSIZE_STN)
00088c  e3500d0a          CMP      r0,#0x280
000890  2a000016          BCS      |L1.2288|
000894  e3510e1e          CMP      r1,#0x1e0
000898  2a000014          BCS      |L1.2288|
;;;129            frameBuffer2Bit[(y)][(x)/16]=( frameBuffer2Bit[(y)][x/16]
00089c  e0813101          ADD      r3,r1,r1,LSL #2
0008a0  e59fc684          LDR      r12,|L1.3884|
0008a4  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer2Bit
0008a8  e08c3283          ADD      r3,r12,r3,LSL #5
0008ac  e1a0c220          LSR      r12,r0,#4
0008b0  e793310c          LDR      r3,[r3,r12,LSL #2]
0008b4  e1a0ce00          LSL      r12,r0,#28
0008b8  e1a0cdac          LSR      r12,r12,#27
0008bc  e3a04103          MOV      r4,#0xc0000000
0008c0  e1c33c34          BIC      r3,r3,r4,LSR r12
0008c4  e202c003          AND      r12,r2,#3
0008c8  e200400f          AND      r4,r0,#0xf
0008cc  e264400f          RSB      r4,r4,#0xf
0008d0  e1a04084          LSL      r4,r4,#1
0008d4  e183341c          ORR      r3,r3,r12,LSL r4
0008d8  e081c101          ADD      r12,r1,r1,LSL #2
0008dc  e59f4648          LDR      r4,|L1.3884|
0008e0  e5944000          LDR      r4,[r4,#0]  ; frameBuffer2Bit
0008e4  e084c28c          ADD      r12,r4,r12,LSL #5
0008e8  e1a04220          LSR      r4,r0,#4
0008ec  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.2288|
;;;130    	& ~(0xc0000000>>((x)%16)*2) ) | ( (c&0x00000003)<<((16-1-((x)%16))*2) );
;;;131    }
0008f0  e49d4004          POP      {r4}
0008f4  e12fff1e          BX       lr
;;;132    
                          ENDP

                  BitmapViewStn1Bit PROC
                  |L1.2296|
;;;373    //add by Y.J.GUO April 13,2005
;;;374    void BitmapViewStn1Bit(UINT8T *pBuffer)
0008f8  e12fff1e          BX       lr
;;;375    {
;;;376         
;;;377    }
;;;378    void BitmapViewStn2Bit(UINT8T *pBuffer)
                          ENDP

                  _PutStn1Bit PROC
                  |L1.2300|
;;;108    *********************************************************************************************/
;;;109    void _PutStn1Bit(UINT32T x,UINT32T y,UINT32T c)
0008fc  e52d4004          PUSH     {r4}
;;;110    {
;;;111        if(x<SCR_XSIZE_STN&& y<SCR_YSIZE_STN)
000900  e3500d0a          CMP      r0,#0x280
000904  2a000014          BCS      |L1.2396|
000908  e3510e1e          CMP      r1,#0x1e0
00090c  2a000012          BCS      |L1.2396|
;;;112    	frameBuffer1Bit[(y)][(x)/32]=( frameBuffer1Bit[(y)][(x)/32]
000910  e0813101          ADD      r3,r1,r1,LSL #2
000914  e59fc614          LDR      r12,|L1.3888|
000918  e59cc000          LDR      r12,[r12,#0]  ; frameBuffer1Bit
00091c  e08c3203          ADD      r3,r12,r3,LSL #4
000920  e1a0c2a0          LSR      r12,r0,#5
000924  e793c10c          LDR      r12,[r3,r12,LSL #2]
000928  e200301f          AND      r3,r0,#0x1f
00092c  e3a04102          MOV      r4,#0x80000000
000930  e1ccc334          BIC      r12,r12,r4,LSR r3
000934  e2024001          AND      r4,r2,#1
000938  e200301f          AND      r3,r0,#0x1f
00093c  e263301f          RSB      r3,r3,#0x1f
000940  e18c3314          ORR      r3,r12,r4,LSL r3
000944  e081c101          ADD      r12,r1,r1,LSL #2
000948  e59f45e0          LDR      r4,|L1.3888|
00094c  e5944000          LDR      r4,[r4,#0]  ; frameBuffer1Bit
000950  e084c20c          ADD      r12,r4,r12,LSL #4
000954  e1a042a0          LSR      r4,r0,#5
000958  e78c3104          STR      r3,[r12,r4,LSL #2]
                  |L1.2396|
;;;113    	& ~(0x80000000>>((x)%32)*1) ) | ( (c&0x00000001)<< ((32-1-((x)%32))*1) );
;;;114    }
00095c  e49d4004          POP      {r4}
000960  e12fff1e          BX       lr
;;;115    
                          ENDP

                  Glib_Init PROC
;;;29     *********************************************************************************************/
;;;30     void Glib_Init(int type)
000964  e59f25c8          LDR      r2,|L1.3892|
;;;31     {
;;;32         switch(type)
000968  e0401002          SUB      r1,r0,r2
00096c  e1500002          CMP      r0,r2
000970  0a000060          BEQ      |L1.2808|
000974  ca000014          BGT      |L1.2508|
000978  e2422c22          SUB      r2,r2,#0x2200
00097c  e0401002          SUB      r1,r0,r2
000980  e1500002          CMP      r0,r2
000984  0a00003b          BEQ      |L1.2680|
000988  ca000007          BGT      |L1.2476|
00098c  e3e01a01          MVN      r1,#0x1000
000990  e0911000          ADDS     r1,r1,r0
000994  0a00001f          BEQ      |L1.2584|
000998  e3510001          CMP      r1,#1
00099c  0a000025          BEQ      |L1.2616|
0009a0  e3510003          CMP      r1,#3
0009a4  1a000093          BNE      |L1.3064|
0009a8  ea00002a          B        |L1.2648|
                  |L1.2476|
0009ac  e3510001          CMP      r1,#1
0009b0  0a000038          BEQ      |L1.2712|
0009b4  e3e02c21          MVN      r2,#0x2100
0009b8  e0911002          ADDS     r1,r1,r2
0009bc  0a00003d          BEQ      |L1.2744|
0009c0  e3510002          CMP      r1,#2
0009c4  1a00008b          BNE      |L1.3064|
0009c8  ea000042          B        |L1.2776|
                  |L1.2508|
0009cc  e3510c02          CMP      r1,#0x200
0009d0  0a000070          BEQ      |L1.2968|
0009d4  ca000006          BGT      |L1.2548|
0009d8  e3510001          CMP      r1,#1
0009dc  0a00004d          BEQ      |L1.2840|
0009e0  e3510003          CMP      r1,#3
0009e4  0a000053          BEQ      |L1.2872|
0009e8  e3510007          CMP      r1,#7
0009ec  1a000081          BNE      |L1.3064|
0009f0  ea000058          B        |L1.2904|
                  |L1.2548|
0009f4  e3e02c02          MVN      r2,#0x200
0009f8  e0911002          ADDS     r1,r1,r2
0009fc  0a00006d          BEQ      |L1.3000|
000a00  e3510002          CMP      r1,#2
000a04  0a000073          BEQ      |L1.3032|
000a08  e2411bf7          SUB      r1,r1,#0x3dc00
000a0c  e2511014          SUBS     r1,r1,#0x14
000a10  1a000078          BNE      |L1.3064|
000a14  ea000057          B        |L1.2936|
                  |L1.2584|
;;;33         {
;;;34     	    case MODE_STN_1BIT:
000a18  e1a00000          MOV      r0,r0
;;;35     	    	PutPixel=_PutStn1Bit;
000a1c  e24f1f4a          ADR      r1,|L1.2300|
000a20  e59f2510          LDR      r2,|L1.3896|
000a24  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;36     	    	BitmapView=BitmapViewStn1Bit;
000a28  e24f1f4e          ADR      r1,|L1.2296|
000a2c  e59f2508          LDR      r2,|L1.3900|
000a30  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;37     	    	break;
000a34  ea000071          B        |L1.3072|
                  |L1.2616|
;;;38     	    case MODE_STN_2BIT:
000a38  e1a00000          MOV      r0,r0
;;;39     	       	PutPixel=_PutStn2Bit;
000a3c  e24f1f6f          ADR      r1,|L1.2184|
000a40  e59f24f0          LDR      r2,|L1.3896|
000a44  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;40     	       	BitmapView=BitmapViewStn2Bit;
000a48  e24f1f73          ADR      r1,|L1.2180|
000a4c  e59f24e8          LDR      r2,|L1.3900|
000a50  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;41     	       	break;
000a54  ea000069          B        |L1.3072|
                  |L1.2648|
;;;42     	    case MODE_STN_4BIT:
000a58  e1a00000          MOV      r0,r0
;;;43     	        PutPixel=_PutStn4Bit;
000a5c  e24f1e25          ADR      r1,|L1.2068|
000a60  e59f24d0          LDR      r2,|L1.3896|
000a64  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;44     	        BitmapView=BitmapViewStn4Bit;
000a68  e24f1e26          ADR      r1,|L1.2064|
000a6c  e59f24c8          LDR      r2,|L1.3900|
000a70  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;45     	        break;
000a74  ea000061          B        |L1.3072|
                  |L1.2680|
;;;46     	    case MODE_CSTN_8BIT:
000a78  e1a00000          MOV      r0,r0
;;;47     	    	PutPixel=_PutCstn8Bit;
000a7c  e24f1fb9          ADR      r1,|L1.1952|
000a80  e59f24b0          LDR      r2,|L1.3896|
000a84  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;48     	    	BitmapView=BitmapViewCstn8Bit;
000a88  e24f1fd6          ADR      r1,|L1.1848|
000a8c  e59f24a8          LDR      r2,|L1.3900|
000a90  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;49     	    	break;   
000a94  ea000059          B        |L1.3072|
                  |L1.2712|
;;;50     	    case MODE_CSTN_12BIT:
000a98  e1a00000          MOV      r0,r0
;;;51     	    	PutPixel=_PutCstn12Bit;
000a9c  e59f149c          LDR      r1,|L1.3904|
000aa0  e59f2490          LDR      r2,|L1.3896|
000aa4  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;52     	    	BitmapView=BitmapViewCstn12Bit;
000aa8  e59f1494          LDR      r1,|L1.3908|
000aac  e59f2488          LDR      r2,|L1.3900|
000ab0  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;53     	    	break;   
000ab4  ea000051          B        |L1.3072|
                  |L1.2744|
;;;54     	    case MODE_TFT_8BIT_240320:
000ab8  e1a00000          MOV      r0,r0
;;;55     	    	PutPixel=_PutTft8Bit_240320;
000abc  e59f1484          LDR      r1,|L1.3912|
000ac0  e59f2470          LDR      r2,|L1.3896|
000ac4  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;56     	    	BitmapView=BitmapViewTft8Bit_240320;  	
000ac8  e59f147c          LDR      r1,|L1.3916|
000acc  e59f2468          LDR      r2,|L1.3900|
000ad0  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;57     	    	break;   
000ad4  ea000049          B        |L1.3072|
                  |L1.2776|
;;;58     	    case MODE_TFT_16BIT_240320:
000ad8  e1a00000          MOV      r0,r0
;;;59     	    	PutPixel=_PutTft16Bit_240320;
000adc  e24f1e6a          ADR      r1,|L1.1092|
000ae0  e59f2450          LDR      r2,|L1.3896|
000ae4  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;60     	    	BitmapView=BitmapViewTft16Bit_240320;  	
000ae8  e24f1e6b          ADR      r1,|L1.1088|
000aec  e59f2448          LDR      r2,|L1.3900|
000af0  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;61     	    	break;   
000af4  ea000041          B        |L1.3072|
                  |L1.2808|
;;;62     	    case MODE_TFT_1BIT_640480:
000af8  e1a00000          MOV      r0,r0
;;;63     	    	PutPixel=_PutTft1Bit_640480;
000afc  e59f144c          LDR      r1,|L1.3920|
000b00  e59f2430          LDR      r2,|L1.3896|
000b04  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;64     	    	BitmapView=BitmapViewTft1Bit_640480;
000b08  e59f1444          LDR      r1,|L1.3924|
000b0c  e59f2428          LDR      r2,|L1.3900|
000b10  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;65     	    	break;   
000b14  ea000039          B        |L1.3072|
                  |L1.2840|
;;;66     	    case MODE_TFT_8BIT_640480:
000b18  e1a00000          MOV      r0,r0
;;;67     	    	PutPixel=_PutTft8Bit_640480;
000b1c  e24f1d1f          ADR      r1,|L1.868|
000b20  e59f2410          LDR      r2,|L1.3896|
000b24  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;68     	    	BitmapView=BitmapViewTft8Bit_640480;
000b28  e24f1e7d          ADR      r1,|L1.864|
000b2c  e59f2408          LDR      r2,|L1.3900|
000b30  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;69     	    	break;   
000b34  ea000031          B        |L1.3072|
                  |L1.2872|
;;;70     	    case MODE_TFT_16BIT_640480:
000b38  e1a00000          MOV      r0,r0
;;;71     	    	PutPixel=_PutTft16Bit_640480;
000b3c  e59f1414          LDR      r1,|L1.3928|
000b40  e59f23f0          LDR      r2,|L1.3896|
000b44  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;72     	    	BitmapView=BitmapViewTft16Bit_640480;
000b48  e59f140c          LDR      r1,|L1.3932|
000b4c  e59f23e8          LDR      r2,|L1.3900|
000b50  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;73     	    	break;   
000b54  ea000029          B        |L1.3072|
                  |L1.2904|
;;;74     		case MODE_TFT_16BIT_800480:
000b58  e1a00000          MOV      r0,r0
;;;75     	    	PutPixel=_PutTft16Bit_800480;
000b5c  e59f13fc          LDR      r1,|L1.3936|
000b60  e59f23d0          LDR      r2,|L1.3896|
000b64  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;76     	    	BitmapView=BitmapViewTft16Bit_800480;
000b68  e59f13f4          LDR      r1,|L1.3940|
000b6c  e59f23c8          LDR      r2,|L1.3900|
000b70  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;77     	    	break;   
000b74  ea000021          B        |L1.3072|
                  |L1.2936|
;;;78     	    case MODE_TFT_24BIT_640480:
000b78  e1a00000          MOV      r0,r0
;;;79     	    	PutPixel=_PutTft24Bit_640480;
000b7c  e59f13e4          LDR      r1,|L1.3944|
000b80  e59f23b0          LDR      r2,|L1.3896|
000b84  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;80     	    	BitmapView=BitmapViewTft24Bit_640480;
000b88  e59f13dc          LDR      r1,|L1.3948|
000b8c  e59f23a8          LDR      r2,|L1.3900|
000b90  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;81     	    	break;   
000b94  ea000019          B        |L1.3072|
                  |L1.2968|
;;;82     	    case MODE_TFT_1BIT_800600:
000b98  e1a00000          MOV      r0,r0
;;;83     	    	PutPixel=_PutTft1Bit_800600;
000b9c  e59f13cc          LDR      r1,|L1.3952|
000ba0  e59f2390          LDR      r2,|L1.3896|
000ba4  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;84     	    	BitmapView=BitmapViewTft1Bit_800600;
000ba8  e59f13c4          LDR      r1,|L1.3956|
000bac  e59f2388          LDR      r2,|L1.3900|
000bb0  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;85     	    	break;   
000bb4  ea000011          B        |L1.3072|
                  |L1.3000|
;;;86     	    case MODE_TFT_8BIT_800600:
000bb8  e1a00000          MOV      r0,r0
;;;87     	    	PutPixel=_PutTft8Bit_800600;
000bbc  e59f13b4          LDR      r1,|L1.3960|
000bc0  e59f2370          LDR      r2,|L1.3896|
000bc4  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;88     	    	BitmapView=BitmapViewTft8Bit_800600;
000bc8  e59f13ac          LDR      r1,|L1.3964|
000bcc  e59f2368          LDR      r2,|L1.3900|
000bd0  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;89     	    	break;   
000bd4  ea000009          B        |L1.3072|
                  |L1.3032|
;;;90     	    case MODE_TFT_16BIT_800600:
000bd8  e1a00000          MOV      r0,r0
;;;91     	    	PutPixel=_PutTft16Bit_800600;
000bdc  e24f1ebe          ADR      r1,|L1.4|
000be0  e59f2350          LDR      r2,|L1.3896|
000be4  e5821000          STR      r1,[r2,#0]  ; PutPixel
;;;92     	    	BitmapView=BitmapViewTft16Bit_800600;
000be8  e24f1ebf          ADR      r1,|L1.0|
000bec  e59f2348          LDR      r2,|L1.3900|
000bf0  e5821000          STR      r1,[r2,#0]  ; BitmapView
;;;93     	    	break;   
000bf4  ea000001          B        |L1.3072|
                  |L1.3064|
;;;94     	    default: 
000bf8  e1a00000          MOV      r0,r0
;;;95     	    	break;
000bfc  e1a00000          MOV      r0,r0
                  |L1.3072|
000c00  e1a00000          MOV      r0,r0                 ;37
;;;96        }
;;;97     }
000c04  e12fff1e          BX       lr
;;;98     
                          ENDP

                  Glib_Line PROC
;;;544    *********************************************************************************************/
;;;545    void Glib_Line(int x1,int y1,int x2,int y2,int color)
000c08  e92d5ff0          PUSH     {r4-r12,lr}
;;;546    {
000c0c  e1a07000          MOV      r7,r0
000c10  e1a08001          MOV      r8,r1
000c14  e1a09002          MOV      r9,r2
000c18  e1a0a003          MOV      r10,r3
000c1c  e59db028          LDR      r11,[sp,#0x28]
;;;547    	int dx,dy,e;
;;;548    	dx=x2-x1; 
000c20  e0496007          SUB      r6,r9,r7
;;;549    	dy=y2-y1;
000c24  e04a5008          SUB      r5,r10,r8
;;;550        
;;;551    	if(dx>=0)
000c28  e3560000          CMP      r6,#0
000c2c  ba000056          BLT      |L1.3468|
;;;552    	{
;;;553    		if(dy >= 0)                                             // dy>=0
000c30  e3550000          CMP      r5,#0
000c34  ba000029          BLT      |L1.3296|
;;;554    		{
;;;555    			if(dx>=dy)                                          // 1/8 octant
000c38  e1560005          CMP      r6,r5
000c3c  ba000013          BLT      |L1.3216|
;;;556    			{
;;;557    				e=dy-dx/2;
000c40  e1a00006          MOV      r0,r6
000c44  e0861fa0          ADD      r1,r6,r0,LSR #31
000c48  e04540c1          SUB      r4,r5,r1,ASR #1
;;;558    				while(x1<=x2)
000c4c  ea00000c          B        |L1.3204|
                  |L1.3152|
;;;559    				{
;;;560    					PutPixel(x1,y1,color);
000c50  e1a0200b          MOV      r2,r11
000c54  e1a01008          MOV      r1,r8
000c58  e1a00007          MOV      r0,r7
000c5c  e59f32d4          LDR      r3,|L1.3896|
000c60  e5933000          LDR      r3,[r3,#0]  ; PutPixel
000c64  e1a0e00f          MOV      lr,pc
000c68  e12fff13          BX       r3
;;;561    					if(e>0){y1+=1;e-=dx;}	
000c6c  e3540000          CMP      r4,#0
000c70  da000001          BLE      |L1.3196|
000c74  e2888001          ADD      r8,r8,#1
000c78  e0444006          SUB      r4,r4,r6
                  |L1.3196|
;;;562    					x1+=1;
000c7c  e2877001          ADD      r7,r7,#1
;;;563    					e+=dy;
000c80  e0844005          ADD      r4,r4,r5
                  |L1.3204|
000c84  e1570009          CMP      r7,r9                 ;558
000c88  dafffff0          BLE      |L1.3152|
000c8c  ea000095          B        |L1.3816|
                  |L1.3216|
;;;564    				}
;;;565    			}
;;;566    			else                                                // 2/8 octant
;;;567    			{
;;;568    				e=dx-dy/2;
000c90  e1a00005          MOV      r0,r5
000c94  e0851fa0          ADD      r1,r5,r0,LSR #31
000c98  e04640c1          SUB      r4,r6,r1,ASR #1
;;;569    				while(y1<=y2)
000c9c  ea00000c          B        |L1.3284|
                  |L1.3232|
;;;570    				{
;;;571    					PutPixel(x1,y1,color);
000ca0  e1a0200b          MOV      r2,r11
000ca4  e1a01008          MOV      r1,r8
000ca8  e1a00007          MOV      r0,r7
000cac  e59f3284          LDR      r3,|L1.3896|
000cb0  e5933000          LDR      r3,[r3,#0]  ; PutPixel
000cb4  e1a0e00f          MOV      lr,pc
000cb8  e12fff13          BX       r3
;;;572    					if(e>0){x1+=1;e-=dy;}	
000cbc  e3540000          CMP      r4,#0
000cc0  da000001          BLE      |L1.3276|
000cc4  e2877001          ADD      r7,r7,#1
000cc8  e0444005          SUB      r4,r4,r5
                  |L1.3276|
;;;573    					y1+=1;
000ccc  e2888001          ADD      r8,r8,#1
;;;574    					e+=dx;
000cd0  e0844006          ADD      r4,r4,r6
                  |L1.3284|
000cd4  e158000a          CMP      r8,r10                ;569
000cd8  dafffff0          BLE      |L1.3232|
000cdc  ea000081          B        |L1.3816|
                  |L1.3296|
;;;575    				}
;;;576    			}
;;;577    		}
;;;578    		else                                                    // dy<0
;;;579    		{
;;;580    			dy=-dy;                                             // dy=abs(dy)
000ce0  e2655000          RSB      r5,r5,#0
;;;581    
;;;582    			if(dx>=dy)                                          // 8/8 octant
000ce4  e1560005          CMP      r6,r5
000ce8  ba000013          BLT      |L1.3388|
;;;583    			{
;;;584    				e=dy-dx/2;
000cec  e1a00006          MOV      r0,r6
000cf0  e0861fa0          ADD      r1,r6,r0,LSR #31
000cf4  e04540c1          SUB      r4,r5,r1,ASR #1
;;;585    				while(x1<=x2)
000cf8  ea00000c          B        |L1.3376|
                  |L1.3324|
;;;586    				{
;;;587    					PutPixel(x1,y1,color);
000cfc  e1a0200b          MOV      r2,r11
000d00  e1a01008          MOV      r1,r8
000d04  e1a00007          MOV      r0,r7
000d08  e59f3228          LDR      r3,|L1.3896|
000d0c  e5933000          LDR      r3,[r3,#0]  ; PutPixel
000d10  e1a0e00f          MOV      lr,pc
000d14  e12fff13          BX       r3
;;;588    					if(e>0){y1-=1;e-=dx;}	
000d18  e3540000          CMP      r4,#0
000d1c  da000001          BLE      |L1.3368|
000d20  e2488001          SUB      r8,r8,#1
000d24  e0444006          SUB      r4,r4,r6
                  |L1.3368|
;;;589    					x1+=1;
000d28  e2877001          ADD      r7,r7,#1
;;;590    					e+=dy;
000d2c  e0844005          ADD      r4,r4,r5
                  |L1.3376|
000d30  e1570009          CMP      r7,r9                 ;585
000d34  dafffff0          BLE      |L1.3324|
000d38  ea00006a          B        |L1.3816|
                  |L1.3388|
;;;591    				}
;;;592    			}
;;;593    			else                                                // 7/8 octant
;;;594    			{
;;;595    				e=dx-dy/2;
000d3c  e1a00005          MOV      r0,r5
000d40  e0851fa0          ADD      r1,r5,r0,LSR #31
000d44  e04640c1          SUB      r4,r6,r1,ASR #1
;;;596    				while(y1>=y2)
000d48  ea00000c          B        |L1.3456|
                  |L1.3404|
;;;597    				{
;;;598    					PutPixel(x1,y1,color);
000d4c  e1a0200b          MOV      r2,r11
000d50  e1a01008          MOV      r1,r8
000d54  e1a00007          MOV      r0,r7
000d58  e59f31d8          LDR      r3,|L1.3896|
000d5c  e5933000          LDR      r3,[r3,#0]  ; PutPixel
000d60  e1a0e00f          MOV      lr,pc
000d64  e12fff13          BX       r3
;;;599    					if(e>0){x1+=1;e-=dy;}	
000d68  e3540000          CMP      r4,#0
000d6c  da000001          BLE      |L1.3448|
000d70  e2877001          ADD      r7,r7,#1
000d74  e0444005          SUB      r4,r4,r5
                  |L1.3448|
;;;600    					y1-=1;
000d78  e2488001          SUB      r8,r8,#1
;;;601    					e+=dx;
000d7c  e0844006          ADD      r4,r4,r6
                  |L1.3456|
000d80  e158000a          CMP      r8,r10                ;596
000d84  aafffff0          BGE      |L1.3404|
000d88  ea000056          B        |L1.3816|
                  |L1.3468|
;;;602    				}
;;;603    			}
;;;604    		}	
;;;605    	}
;;;606    	else                                                        //dx<0
;;;607    	{
;;;608    		dx=-dx;                                                 //dx=abs(dx)
000d8c  e2666000          RSB      r6,r6,#0
;;;609    		if(dy >= 0)                                             // dy>=0
000d90  e3550000          CMP      r5,#0
000d94  ba000029          BLT      |L1.3648|
;;;610    		{
;;;611    			if(dx>=dy)                                          // 4/8 octant
000d98  e1560005          CMP      r6,r5
000d9c  ba000013          BLT      |L1.3568|
;;;612    			{
;;;613    				e=dy-dx/2;
000da0  e1a00006          MOV      r0,r6
000da4  e0861fa0          ADD      r1,r6,r0,LSR #31
000da8  e04540c1          SUB      r4,r5,r1,ASR #1
;;;614    				while(x1>=x2)
000dac  ea00000c          B        |L1.3556|
                  |L1.3504|
;;;615    				{
;;;616    					PutPixel(x1,y1,color);
000db0  e1a0200b          MOV      r2,r11
000db4  e1a01008          MOV      r1,r8
000db8  e1a00007          MOV      r0,r7
000dbc  e59f3174          LDR      r3,|L1.3896|
000dc0  e5933000          LDR      r3,[r3,#0]  ; PutPixel
000dc4  e1a0e00f          MOV      lr,pc
000dc8  e12fff13          BX       r3
;;;617    					if(e>0){y1+=1;e-=dx;}	
000dcc  e3540000          CMP      r4,#0
000dd0  da000001          BLE      |L1.3548|
000dd4  e2888001          ADD      r8,r8,#1
000dd8  e0444006          SUB      r4,r4,r6
                  |L1.3548|
;;;618    					x1-=1;
000ddc  e2477001          SUB      r7,r7,#1
;;;619    					e+=dy;
000de0  e0844005          ADD      r4,r4,r5
                  |L1.3556|
000de4  e1570009          CMP      r7,r9                 ;614
000de8  aafffff0          BGE      |L1.3504|
000dec  ea00003d          B        |L1.3816|
                  |L1.3568|
;;;620    				}
;;;621    			}
;;;622    			else                                                // 3/8 octant
;;;623    			{
;;;624    				e=dx-dy/2;
000df0  e1a00005          MOV      r0,r5
000df4  e0851fa0          ADD      r1,r5,r0,LSR #31
000df8  e04640c1          SUB      r4,r6,r1,ASR #1
;;;625    				while(y1<=y2)
000dfc  ea00000c          B        |L1.3636|
                  |L1.3584|
;;;626    				{
;;;627    					PutPixel(x1,y1,color);
000e00  e1a0200b          MOV      r2,r11
000e04  e1a01008          MOV      r1,r8
000e08  e1a00007          MOV      r0,r7
000e0c  e59f3124          LDR      r3,|L1.3896|
000e10  e5933000          LDR      r3,[r3,#0]  ; PutPixel
000e14  e1a0e00f          MOV      lr,pc
000e18  e12fff13          BX       r3
;;;628    					if(e>0){x1-=1;e-=dy;}	
000e1c  e3540000          CMP      r4,#0
000e20  da000001          BLE      |L1.3628|
000e24  e2477001          SUB      r7,r7,#1
000e28  e0444005          SUB      r4,r4,r5
                  |L1.3628|
;;;629    					y1+=1;
000e2c  e2888001          ADD      r8,r8,#1
;;;630    					e+=dx;
000e30  e0844006          ADD      r4,r4,r6
                  |L1.3636|
000e34  e158000a          CMP      r8,r10                ;625
000e38  dafffff0          BLE      |L1.3584|
000e3c  ea000029          B        |L1.3816|
                  |L1.3648|
;;;631    				}
;;;632    			}
;;;633    		}
;;;634    		else                                                    // dy<0
;;;635    		{
;;;636    			dy=-dy;                                             // dy=abs(dy)
000e40  e2655000          RSB      r5,r5,#0
;;;637    
;;;638    			if(dx>=dy)                                          // 5/8 octant
000e44  e1560005          CMP      r6,r5
000e48  ba000013          BLT      |L1.3740|
;;;639    			{
;;;640    				e=dy-dx/2;
000e4c  e1a00006          MOV      r0,r6
000e50  e0861fa0          ADD      r1,r6,r0,LSR #31
000e54  e04540c1          SUB      r4,r5,r1,ASR #1
;;;641    				while(x1>=x2)
000e58  ea00000c          B        |L1.3728|
                  |L1.3676|
;;;642    				{
;;;643    					PutPixel(x1,y1,color);
000e5c  e1a0200b          MOV      r2,r11
000e60  e1a01008          MOV      r1,r8
000e64  e1a00007          MOV      r0,r7
000e68  e59f30c8          LDR      r3,|L1.3896|
000e6c  e5933000          LDR      r3,[r3,#0]  ; PutPixel
000e70  e1a0e00f          MOV      lr,pc
000e74  e12fff13          BX       r3
;;;644    					if(e>0){y1-=1;e-=dx;}	
000e78  e3540000          CMP      r4,#0
000e7c  da000001          BLE      |L1.3720|
000e80  e2488001          SUB      r8,r8,#1
000e84  e0444006          SUB      r4,r4,r6
                  |L1.3720|
;;;645    					x1-=1;
000e88  e2477001          SUB      r7,r7,#1
;;;646    					e+=dy;
000e8c  e0844005          ADD      r4,r4,r5
                  |L1.3728|
000e90  e1570009          CMP      r7,r9                 ;641
000e94  aafffff0          BGE      |L1.3676|
000e98  ea000012          B        |L1.3816|
                  |L1.3740|
;;;647    				}
;;;648    			}
;;;649    			else                                                // 6/8 octant
;;;650    			{
;;;651    				e=dx-dy/2;
000e9c  e1a00005          MOV      r0,r5
000ea0  e0851fa0          ADD      r1,r5,r0,LSR #31
000ea4  e04640c1          SUB      r4,r6,r1,ASR #1
;;;652    				while(y1>=y2)
000ea8  ea00000c          B        |L1.3808|
                  |L1.3756|
;;;653    				{
;;;654    					PutPixel(x1,y1,color);
000eac  e1a0200b          MOV      r2,r11
000eb0  e1a01008          MOV      r1,r8
000eb4  e1a00007          MOV      r0,r7
000eb8  e59f3078          LDR      r3,|L1.3896|
000ebc  e5933000          LDR      r3,[r3,#0]  ; PutPixel
000ec0  e1a0e00f          MOV      lr,pc
000ec4  e12fff13          BX       r3
;;;655    					if(e>0){x1-=1;e-=dy;}	
000ec8  e3540000          CMP      r4,#0
000ecc  da000001          BLE      |L1.3800|
000ed0  e2477001          SUB      r7,r7,#1
000ed4  e0444005          SUB      r4,r4,r5
                  |L1.3800|
;;;656    					y1-=1;
000ed8  e2488001          SUB      r8,r8,#1
;;;657    					e+=dx;
000edc  e0844006          ADD      r4,r4,r6
                  |L1.3808|
000ee0  e158000a          CMP      r8,r10                ;652
000ee4  aafffff0          BGE      |L1.3756|
                  |L1.3816|
;;;658    				}
;;;659    			}
;;;660    		}	
;;;661    	}
;;;662    }
000ee8  e8bd5ff0          POP      {r4-r12,lr}
000eec  e12fff1e          BX       lr
                  |L1.3824|
                          DCD      frameBuffer16BitTft800600
                  |L1.3828|
                          DCD      0xffff0000
                  |L1.3832|
                          DCD      frameBuffer8BitTft800600
                  |L1.3836|
                          DCD      frameBuffer1BitTft800600
                  |L1.3840|
                          DCD      frameBuffer24BitTft640480
                  |L1.3844|
                          DCD      frameBuffer16BitTft800480
                  |L1.3848|
                          DCD      frameBuffer16BitTft640480
                  |L1.3852|
                          DCD      frameBuffer8BitTft640480
                  |L1.3856|
                          DCD      frameBuffer1BitTft640480
                  |L1.3860|
                          DCD      frameBuffer16BitTft240320
                  |L1.3864|
                          DCD      frameBuffer8BitTft240320
                  |L1.3868|
                          DCD      0xfff00000
                  |L1.3872|
                          DCD      frameBuffer12Bit
                  |L1.3876|
                          DCD      frameBuffer8Bit
                  |L1.3880|
                          DCD      frameBuffer4Bit
                  |L1.3884|
                          DCD      frameBuffer2Bit
                  |L1.3888|
                          DCD      frameBuffer1Bit
                  |L1.3892|
                          DCD      0x00004201
                  |L1.3896|
                          DCD      PutPixel
                  |L1.3900|
                          DCD      BitmapView
                  |L1.3904|
                          DCD      _PutCstn12Bit
                  |L1.3908|
                          DCD      BitmapViewCstn12Bit
                  |L1.3912|
                          DCD      _PutTft8Bit_240320
                  |L1.3916|
                          DCD      BitmapViewTft8Bit_240320
                  |L1.3920|
                          DCD      _PutTft1Bit_640480
                  |L1.3924|
                          DCD      BitmapViewTft1Bit_640480
                  |L1.3928|
                          DCD      _PutTft16Bit_640480
                  |L1.3932|
                          DCD      BitmapViewTft16Bit_640480
                  |L1.3936|
                          DCD      _PutTft16Bit_800480
                  |L1.3940|
                          DCD      BitmapViewTft16Bit_800480
                  |L1.3944|
                          DCD      _PutTft24Bit_640480
                  |L1.3948|
                          DCD      BitmapViewTft24Bit_640480
                  |L1.3952|
                          DCD      _PutTft1Bit_800600
                  |L1.3956|
                          DCD      BitmapViewTft1Bit_800600
                  |L1.3960|
                          DCD      _PutTft8Bit_800600
                  |L1.3964|
                          DCD      BitmapViewTft8Bit_800600
                          ENDP

                  Glib_Rectangle PROC
;;;502    *********************************************************************************************/
;;;503    void Glib_Rectangle(int x1,int y1,int x2,int y2,int color)
000f80  e92d43f8          PUSH     {r3-r9,lr}
;;;504    {
000f84  e1a05000          MOV      r5,r0
000f88  e1a06001          MOV      r6,r1
000f8c  e1a07002          MOV      r7,r2
000f90  e1a08003          MOV      r8,r3
000f94  e59d4020          LDR      r4,[sp,#0x20]
;;;505        Glib_Line(x1,y1,x2,y1,color);
000f98  e1a03006          MOV      r3,r6
000f9c  e1a02007          MOV      r2,r7
000fa0  e1a01006          MOV      r1,r6
000fa4  e1a00005          MOV      r0,r5
000fa8  e58d4000          STR      r4,[sp,#0]
000fac  ebfffffe          BL       Glib_Line
;;;506        Glib_Line(x2,y1,x2,y2,color);
000fb0  e1a03008          MOV      r3,r8
000fb4  e1a02007          MOV      r2,r7
000fb8  e1a01006          MOV      r1,r6
000fbc  e1a00007          MOV      r0,r7
000fc0  e58d4000          STR      r4,[sp,#0]
000fc4  ebfffffe          BL       Glib_Line
;;;507        Glib_Line(x1,y2,x2,y2,color);
000fc8  e1a03008          MOV      r3,r8
000fcc  e1a02007          MOV      r2,r7
000fd0  e1a01008          MOV      r1,r8
000fd4  e1a00005          MOV      r0,r5
000fd8  e58d4000          STR      r4,[sp,#0]
000fdc  ebfffffe          BL       Glib_Line
;;;508        Glib_Line(x1,y1,x1,y2,color);
000fe0  e1a03008          MOV      r3,r8
000fe4  e1a02005          MOV      r2,r5
000fe8  e1a01006          MOV      r1,r6
000fec  e1a00005          MOV      r0,r5
000ff0  e58d4000          STR      r4,[sp,#0]
000ff4  ebfffffe          BL       Glib_Line
;;;509    }
000ff8  e8bd43f8          POP      {r3-r9,lr}
000ffc  e12fff1e          BX       lr
;;;510    
                          ENDP

                  Glib_FilledRectangle PROC
;;;522    *********************************************************************************************/
;;;523    void Glib_FilledRectangle(int x1,int y1,int x2,int y2,int color)
001000  e92d43f8          PUSH     {r3-r9,lr}
;;;524    {
001004  e1a07000          MOV      r7,r0
001008  e1a05001          MOV      r5,r1
00100c  e1a08002          MOV      r8,r2
001010  e1a06003          MOV      r6,r3
001014  e59d9020          LDR      r9,[sp,#0x20]
;;;525        int i;
;;;526    
;;;527        for(i=y1;i<=y2;i++)
001018  e1a04005          MOV      r4,r5
00101c  ea000006          B        |L1.4156|
                  |L1.4128|
;;;528    	Glib_Line(x1,i,x2,i,color);
001020  e1a03004          MOV      r3,r4
001024  e1a02008          MOV      r2,r8
001028  e1a01004          MOV      r1,r4
00102c  e1a00007          MOV      r0,r7
001030  e58d9000          STR      r9,[sp,#0]
001034  ebfffffe          BL       Glib_Line
001038  e2844001          ADD      r4,r4,#1              ;527
                  |L1.4156|
00103c  e1540006          CMP      r4,r6                 ;527
001040  dafffff6          BLE      |L1.4128|
;;;529    }
001044  e8bd43f8          POP      {r3-r9,lr}
001048  e12fff1e          BX       lr
;;;530    
                          ENDP

                  Glib_ClearScr PROC
;;;673    *********************************************************************************************/
;;;674    void Glib_ClearScr(UINT32T c, int type)
00104c  e92d41f0          PUSH     {r4-r8,lr}
;;;675    {	
001050  e1a07000          MOV      r7,r0
001054  e1a06001          MOV      r6,r1
;;;676        int i,j;
;;;677    
;;;678        if((type&0x4000)&&(type&0x400))                                 // type:MODE_TFT_1BIT_800600|MODE_TFT_8BIT_800600|MODE_TFT_16BIT_800600
001058  e3160901          TST      r6,#0x4000
00105c  0a000013          BEQ      |L1.4272|
001060  e3160b01          TST      r6,#0x400
001064  0a000011          BEQ      |L1.4272|
;;;679            for(j=0;j<SCR_YSIZE_TFT_800600;j++)
001068  e3a04000          MOV      r4,#0
00106c  ea00000c          B        |L1.4260|
                  |L1.4208|
;;;680                for(i=0;i<SCR_XSIZE_TFT_800600;i++)
001070  e3a05000          MOV      r5,#0
001074  ea000007          B        |L1.4248|
                  |L1.4216|
;;;681    		        PutPixel(i,j,c);
001078  e1a02007          MOV      r2,r7
00107c  e1a01004          MOV      r1,r4
001080  e1a00005          MOV      r0,r5
001084  e51f3154          LDR      r3,|L1.3896|
001088  e5933000          LDR      r3,[r3,#0]  ; PutPixel
00108c  e1a0e00f          MOV      lr,pc
001090  e12fff13          BX       r3
001094  e2855001          ADD      r5,r5,#1              ;680
                  |L1.4248|
001098  e3550d19          CMP      r5,#0x640             ;680
00109c  bafffff5          BLT      |L1.4216|
0010a0  e2844001          ADD      r4,r4,#1              ;679
                  |L1.4260|
0010a4  e3540e4b          CMP      r4,#0x4b0             ;679
0010a8  bafffff0          BLT      |L1.4208|
0010ac  ea000050          B        |L1.4596|
                  |L1.4272|
;;;682    
;;;683    
;;;684       // else if((type&0x4000)&&(type&0x200))                            // type:MODE_TFT_1BIT_640480|MODE_TFT_8BIT_640480|MODE_TFT_16BIT_640480
;;;685         //   for(j=0;j<SCR_YSIZE_TFT_640480;j++)
;;;686         //       for(i=0;i<SCR_XSIZE_TFT_640480;i++)
;;;687    	//	        PutPixel(i,j,c);
;;;688    
;;;689    	    else if((type&0x4000)&&(type&0x200))                            // type:MODE_TFT_1BIT_640480|MODE_TFT_8BIT_640480|MODE_TFT_16BIT_640480
0010b0  e3160901          TST      r6,#0x4000
0010b4  0a000013          BEQ      |L1.4360|
0010b8  e3160c02          TST      r6,#0x200
0010bc  0a000011          BEQ      |L1.4360|
;;;690            for(j=0;j<20;j++)
0010c0  e3a04000          MOV      r4,#0
0010c4  ea00000c          B        |L1.4348|
                  |L1.4296|
;;;691                for(i=0;i<20;i++)
0010c8  e3a05000          MOV      r5,#0
0010cc  ea000007          B        |L1.4336|
                  |L1.4304|
;;;692    		        PutPixel(i,j,c);
0010d0  e1a02007          MOV      r2,r7
0010d4  e1a01004          MOV      r1,r4
0010d8  e1a00005          MOV      r0,r5
0010dc  e51f31ac          LDR      r3,|L1.3896|
0010e0  e5933000          LDR      r3,[r3,#0]  ; PutPixel
0010e4  e1a0e00f          MOV      lr,pc
0010e8  e12fff13          BX       r3
0010ec  e2855001          ADD      r5,r5,#1              ;691
                  |L1.4336|
0010f0  e3550014          CMP      r5,#0x14              ;691
0010f4  bafffff5          BLT      |L1.4304|
0010f8  e2844001          ADD      r4,r4,#1              ;690
                  |L1.4348|
0010fc  e3540014          CMP      r4,#0x14              ;690
001100  bafffff0          BLT      |L1.4296|
001104  ea00003a          B        |L1.4596|
                  |L1.4360|
;;;693    
;;;694    
;;;695        else if((type&0x4000)&&(type&0x100))                            // type:MODE_TFT_1BIT_240320|MODE_TFT_8BIT_240320|MODE_TFT_16BIT_240320
001108  e3160901          TST      r6,#0x4000
00110c  0a000013          BEQ      |L1.4448|
001110  e3160c01          TST      r6,#0x100
001114  0a000011          BEQ      |L1.4448|
;;;696            for(j=0;j<SCR_YSIZE_TFT_240320;j++)
001118  e3a04000          MOV      r4,#0
00111c  ea00000c          B        |L1.4436|
                  |L1.4384|
;;;697                for(i=0;i<SCR_XSIZE_TFT_240320;i++)
001120  e3a05000          MOV      r5,#0
001124  ea000007          B        |L1.4424|
                  |L1.4392|
;;;698    		        PutPixel(i,j,c);
001128  e1a02007          MOV      r2,r7
00112c  e1a01004          MOV      r1,r4
001130  e1a00005          MOV      r0,r5
001134  e51f3204          LDR      r3,|L1.3896|
001138  e5933000          LDR      r3,[r3,#0]  ; PutPixel
00113c  e1a0e00f          MOV      lr,pc
001140  e12fff13          BX       r3
001144  e2855001          ADD      r5,r5,#1              ;697
                  |L1.4424|
001148  e3550e1e          CMP      r5,#0x1e0             ;697
00114c  bafffff5          BLT      |L1.4392|
001150  e2844001          ADD      r4,r4,#1              ;696
                  |L1.4436|
001154  e3540d0a          CMP      r4,#0x280             ;696
001158  bafffff0          BLT      |L1.4384|
00115c  ea000024          B        |L1.4596|
                  |L1.4448|
;;;699        else if(type&0x2000)                                            // type:MODE_CSTN_8BIT|MODE_CSTN_12BIT
001160  e3160a02          TST      r6,#0x2000
001164  0a000011          BEQ      |L1.4528|
;;;700            for(j=0;j<SCR_YSIZE_CSTN;j++)
001168  e3a04000          MOV      r4,#0
00116c  ea00000c          B        |L1.4516|
                  |L1.4464|
;;;701        	    for(i=0;i<SCR_XSIZE_CSTN;i++)
001170  e3a05000          MOV      r5,#0
001174  ea000007          B        |L1.4504|
                  |L1.4472|
;;;702    		        PutPixel(i,j,c);
001178  e1a02007          MOV      r2,r7
00117c  e1a01004          MOV      r1,r4
001180  e1a00005          MOV      r0,r5
001184  e51f3254          LDR      r3,|L1.3896|
001188  e5933000          LDR      r3,[r3,#0]  ; PutPixel
00118c  e1a0e00f          MOV      lr,pc
001190  e12fff13          BX       r3
001194  e2855001          ADD      r5,r5,#1              ;701
                  |L1.4504|
001198  e3550d0a          CMP      r5,#0x280             ;701
00119c  bafffff5          BLT      |L1.4472|
0011a0  e2844001          ADD      r4,r4,#1              ;700
                  |L1.4516|
0011a4  e3540e1e          CMP      r4,#0x1e0             ;700
0011a8  bafffff0          BLT      |L1.4464|
0011ac  ea000010          B        |L1.4596|
                  |L1.4528|
;;;703        else                                                            // type:MODE_CSTN_4BIT|MODE_STN_2BIT|MODE_STN_1BIT
;;;704            for(j=0;j<SCR_YSIZE_STN;j++)
0011b0  e3a04000          MOV      r4,#0
0011b4  ea00000c          B        |L1.4588|
                  |L1.4536|
;;;705        	    for(i=0;i<SCR_XSIZE_STN;i++)
0011b8  e3a05000          MOV      r5,#0
0011bc  ea000007          B        |L1.4576|
                  |L1.4544|
;;;706    		        PutPixel(i,j,c);
0011c0  e1a02007          MOV      r2,r7
0011c4  e1a01004          MOV      r1,r4
0011c8  e1a00005          MOV      r0,r5
0011cc  e51f329c          LDR      r3,|L1.3896|
0011d0  e5933000          LDR      r3,[r3,#0]  ; PutPixel
0011d4  e1a0e00f          MOV      lr,pc
0011d8  e12fff13          BX       r3
0011dc  e2855001          ADD      r5,r5,#1              ;705
                  |L1.4576|
0011e0  e3550d0a          CMP      r5,#0x280             ;705
0011e4  bafffff5          BLT      |L1.4544|
0011e8  e2844001          ADD      r4,r4,#1              ;704
                  |L1.4588|
0011ec  e3540e1e          CMP      r4,#0x1e0             ;704
0011f0  bafffff0          BLT      |L1.4536|
                  |L1.4596|
;;;707    }
0011f4  e8bd41f0          POP      {r4-r8,lr}
0011f8  e12fff1e          BX       lr
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  PutPixel
                          DCD      0x00000000
                  BitmapView
                          DCD      0x00000000
