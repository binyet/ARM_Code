<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\SDRAM\LCD_Test.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\SDRAM\LCD_Test.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Wed Jun 07 20:33:06 2017
<BR><P>
<H3>Maximum Stack Usage =        440 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; color_lcd_test &rArr; lcd_init_app &rArr; Lcd_port_init &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4]">Reset_Handler</a>
 <LI><a href="#[dd]">__user_initial_stackheap</a>
 <LI><a href="#[5]">Undef_Handler</a>
 <LI><a href="#[6]">SWI_Handler</a>
 <LI><a href="#[7]">PAbt_Handler</a>
 <LI><a href="#[8]">DAbt_Handler</a>
 <LI><a href="#[9]">IRQ_Handler</a>
 <LI><a href="#[a]">FIQ_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">Undef_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">Undef_Handler</a><BR>
 <LI><a href="#[6]">SWI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SWI_Handler</a><BR>
 <LI><a href="#[7]">PAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">PAbt_Handler</a><BR>
 <LI><a href="#[8]">DAbt_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">DAbt_Handler</a><BR>
 <LI><a href="#[a]">FIQ_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">FIQ_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">BitmapViewCstn12Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[95]">BitmapViewCstn8Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[8f]">BitmapViewStn1Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[91]">BitmapViewStn2Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[93]">BitmapViewStn4Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[97]">BitmapViewTft16Bit_240320</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[17]">BitmapViewTft16Bit_640480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[19]">BitmapViewTft16Bit_800480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[9b]">BitmapViewTft16Bit_800600</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[15]">BitmapViewTft1Bit_640480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[1d]">BitmapViewTft1Bit_800600</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[1b]">BitmapViewTft24Bit_640480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[13]">BitmapViewTft8Bit_240320</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[99]">BitmapViewTft8Bit_640480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[1f]">BitmapViewTft8Bit_800600</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[8]">DAbt_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[a]">FIQ_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[9]">IRQ_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[e]">Lcd_Int_Fifo</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[f]">Lcd_Int_Fifo_640480</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[d]">Lcd_Int_Frame</a> from lcd.o(.text) referenced from lcd.o(.text)
 <LI><a href="#[7]">PAbt_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[6]">SWI_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[5]">Undef_Handler</a> from s3c2410a.o(RESET) referenced from s3c2410a.o(RESET)
 <LI><a href="#[10]">_PutCstn12Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[94]">_PutCstn8Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[8e]">_PutStn1Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[90]">_PutStn2Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[92]">_PutStn4Bit</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[96]">_PutTft16Bit_240320</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[16]">_PutTft16Bit_640480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[18]">_PutTft16Bit_800480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[9a]">_PutTft16Bit_800600</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[14]">_PutTft1Bit_640480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[1c]">_PutTft1Bit_800600</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[1a]">_PutTft24Bit_640480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[12]">_PutTft8Bit_240320</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[98]">_PutTft8Bit_640480</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[1e]">_PutTft8Bit_800600</a> from glib.o(.text) referenced from glib.o(.text)
 <LI><a href="#[23]">__main</a> from __main.o(!!!main) referenced from s3c2410a.o(RESET)
 <LI><a href="#[20]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[22]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[21]">_sputc</a> from _sputc.o(.text) referenced from c89vsprintf.o(.text)
 <LI><a href="#[aa]">break_point</a> from sys_init.o(.text) referenced from sys_init.o(.text)
 <LI><a href="#[ad]">debug_abort_d</a> from sys_init.o(.text) referenced from sys_init.o(.text)
 <LI><a href="#[af]">debug_fiq</a> from sys_init.o(.text) referenced from sys_init.o(.text)
 <LI><a href="#[ac]">debug_swi</a> from sys_init.o(.text) referenced from sys_init.o(.text)
 <LI><a href="#[ab]">debug_undef</a> from sys_init.o(.text) referenced from sys_init.o(.text)
 <LI><a href="#[c]">main</a> from main.o(.text) referenced from rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (ARM, 0 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>__main</STRONG> (ARM, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[24]"></a>__scatterload</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[26]"></a>__scatterload_rt2</STRONG> (ARM, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[105]"></a>__scatterload_null</STRONG> (ARM, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[27]"></a>__scatterload_copy</STRONG> (ARM, 40 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[106]"></a>__scatterload_zeroinit</STRONG> (ARM, 44 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[28]"></a>_printf_n</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount (via Veneer)
</UL>

<P><STRONG><a name="[cc]"></a>_printf_percent</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf (via Veneer)
</UL>

<P><STRONG><a name="[2a]"></a>_printf_p</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr (via Veneer)
</UL>

<P><STRONG><a name="[2c]"></a>_printf_f</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2e]"></a>_printf_e</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[2f]"></a>_printf_g</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[30]"></a>_printf_a</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex (Weak Reference)
</UL>

<P><STRONG><a name="[107]"></a>_printf_ll</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[32]"></a>_printf_i</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[34]"></a>_printf_d</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[35]"></a>_printf_u</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
</UL>

<P><STRONG><a name="[36]"></a>_printf_o</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct (via Veneer)
</UL>

<P><STRONG><a name="[38]"></a>_printf_x</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex (via Veneer)
</UL>

<P><STRONG><a name="[3a]"></a>_printf_lli</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[3c]"></a>_printf_lld</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[3d]"></a>_printf_llu</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
</UL>

<P><STRONG><a name="[3e]"></a>_printf_llo</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct (via Veneer)
</UL>

<P><STRONG><a name="[40]"></a>_printf_llx</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex (via Veneer)
</UL>

<P><STRONG><a name="[108]"></a>_printf_l</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[42]"></a>_printf_c</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char (via Veneer)
</UL>

<P><STRONG><a name="[44]"></a>_printf_s</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string (via Veneer)
</UL>

<P><STRONG><a name="[46]"></a>_printf_lc</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar (via Veneer)
</UL>

<P><STRONG><a name="[48]"></a>_printf_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring (via Veneer)
</UL>

<P><STRONG><a name="[109]"></a>_printf_percent_end</STRONG> (ARM, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[52]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li (via Veneer)
</UL>

<P><STRONG><a name="[10a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[4a]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
</UL>

<P><STRONG><a name="[10c]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[4c]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype (via Veneer)
</UL>

<P><STRONG><a name="[10f]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[110]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[4d]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric (via Veneer)
</UL>

<P><STRONG><a name="[111]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[112]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[113]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[114]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[115]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[116]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[117]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[118]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[119]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[11a]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[11b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[11c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[11d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[56]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls (via Veneer)
</UL>

<P><STRONG><a name="[11e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[11f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[120]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[121]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[122]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[123]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[25]"></a>__rt_entry</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[124]"></a>__rt_entry_presh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[4f]"></a>__rt_entry_sh</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51]"></a>__rt_entry_li</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init (via Veneer)
</UL>

<P><STRONG><a name="[125]"></a>__rt_entry_postsh_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[53]"></a>__rt_entry_main</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via BX)
</UL>

<P><STRONG><a name="[126]"></a>__rt_entry_postli_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[df]"></a>__rt_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit (via Veneer)
</UL>

<P><STRONG><a name="[55]"></a>__rt_exit_ls</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (via Veneer)
</UL>

<P><STRONG><a name="[127]"></a>__rt_exit_prels_1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[57]"></a>__rt_exit_exit</STRONG> (ARM, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit (via Veneer)
</UL>

<P><STRONG><a name="[dd]"></a>__user_initial_stackheap</STRONG> (ARM, 0 bytes, Stack size unknown bytes, s3c2410a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[59]"></a>Lcd_port_init</STRONG> (ARM, 152 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = Lcd_port_init &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_On
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit_On
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[68]"></a>Lcd_Port_Return</STRONG> (ARM, 80 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app_end
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[7a]"></a>Lcd_Palette1Bit_Init</STRONG> (ARM, 24 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
</UL>

<P><STRONG><a name="[71]"></a>Lcd_Palette8Bit_Init</STRONG> (ARM, 64 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_On
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
</UL>

<P><STRONG><a name="[d]"></a>Lcd_Int_Frame</STRONG> (ARM, 136 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Lcd_Int_Frame &rArr; delay &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[e]"></a>Lcd_Int_Fifo</STRONG> (ARM, 236 bytes, Stack size 24 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = Lcd_Int_Fifo &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>Test_Lcd_Stn_1Bit</STRONG> (ARM, 872 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[69]"></a>Test_Lcd_Stn_2Bit</STRONG> (ARM, 1020 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[6a]"></a>Test_Lcd_Stn_4Bit</STRONG> (ARM, 1032 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[6b]"></a>Test_Lcd_Cstn_8Bit</STRONG> (ARM, 1064 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_CstnOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[6e]"></a>Test_Lcd_Cstn_8Bit_On</STRONG> (ARM, 220 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_CstnOnOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[6f]"></a>Test_Lcd_Cstn_12Bit</STRONG> (ARM, 1264 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_CstnOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[70]"></a>Test_Lcd_Tft_8Bit_240320</STRONG> (ARM, 1140 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Lpc3600Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[74]"></a>Test_Lcd_Tft_16Bit_240320</STRONG> (ARM, 1004 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Lpc3600Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[75]"></a>Test_Lcd_Tft_8Bit_240320_On</STRONG> (ARM, 160 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Lpc3600Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[76]"></a>Test_Lcd_Tft_8Bit_240320_Bmp</STRONG> (ARM, 188 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Lpc3600Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[77]"></a>Test_Lcd_Tft_8Bit_240320_IntFr</STRONG> (ARM, 328 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Lpc3600Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[78]"></a>Test_Lcd_Tft_8Bit_240320_IntFi</STRONG> (ARM, 332 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Lpc3600Enable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[f]"></a>Lcd_Int_Fifo_640480</STRONG> (ARM, 148 bytes, Stack size 12 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Lcd_Int_Fifo_640480
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lcd.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>Test_Lcd_Tft_1Bit_640480</STRONG> (ARM, 1028 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette1Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[7b]"></a>Test_Lcd_Tft_8Bit_640480</STRONG> (ARM, 1376 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[7c]"></a>Test_Lcd_Tft_8Bit_640480_Palette</STRONG> (ARM, 356 bytes, Stack size 48 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[7d]"></a>Test_Lcd_Tft_8Bit_640480_Bswp</STRONG> (ARM, 656 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[7e]"></a>Test_Lcd_Tft_16Bit_640480</STRONG> (ARM, 1216 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[7f]"></a>Test_Lcd_Tft_16Bit_640480_Hwswp</STRONG> (ARM, 364 bytes, Stack size 16 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[80]"></a>Test_Lcd_Tft_1Bit_800600</STRONG> (ARM, 912 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette1Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[81]"></a>Test_Lcd_Tft_8Bit_800600</STRONG> (ARM, 796 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Palette8Bit_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[5e]"></a>Lcd_Init</STRONG> (ARM, 2772 bytes, Stack size 0 bytes, lcdlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_On
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit_On
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[6c]"></a>Lcd_CstnOnOff</STRONG> (ARM, 120 bytes, Stack size 0 bytes, lcdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit_On
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
</UL>

<P><STRONG><a name="[60]"></a>Lcd_EnvidOnOff</STRONG> (ARM, 60 bytes, Stack size 0 bytes, lcdlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app_end
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_On
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[72]"></a>Lcd_Lpc3600Enable</STRONG> (ARM, 40 bytes, Stack size 0 bytes, lcdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_On
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
</UL>

<P><STRONG><a name="[73]"></a>Lcd_PowerEnable</STRONG> (ARM, 84 bytes, Stack size 0 bytes, lcdlib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_On
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
</UL>

<P><STRONG><a name="[67]"></a>Lcd_MoveViewPort</STRONG> (ARM, 1932 bytes, Stack size 8 bytes, lcdlib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[66]"></a>MoveViewPort</STRONG> (ARM, 940 bytes, Stack size 24 bytes, lcdlib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_MoveViewPort
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[c]"></a>main</STRONG> (ARM, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = main &rArr; color_lcd_test &rArr; lcd_init_app &rArr; Lcd_port_init &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtentry2.o(.ARM.Collect$$rtentry$$0000000D)
</UL>
<P><STRONG><a name="[84]"></a>lcd_init_app</STRONG> (ARM, 72 bytes, Stack size 8 bytes, color_lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = lcd_init_app &rArr; Lcd_port_init &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_PowerEnable
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_ClearScr
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
</UL>

<P><STRONG><a name="[85]"></a>lcd_init_app_end</STRONG> (ARM, 24 bytes, Stack size 8 bytes, color_lcd_test.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_EnvidOnOff
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Port_Return
</UL>

<P><STRONG><a name="[86]"></a>Lcd_Draw_Line</STRONG> (ARM, 1032 bytes, Stack size 72 bytes, color_lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Lcd_Draw_Line &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
</UL>

<P><STRONG><a name="[83]"></a>color_lcd_test</STRONG> (ARM, 424 bytes, Stack size 32 bytes, color_lcd_test.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = color_lcd_test &rArr; lcd_init_app &rArr; Lcd_port_init &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitmapViewTft16Bit_800480
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Draw_Line
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9b]"></a>BitmapViewTft16Bit_800600</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[9a]"></a>_PutTft16Bit_800600</STRONG> (ARM, 120 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft16Bit_800600
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[1f]"></a>BitmapViewTft8Bit_800600</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>_PutTft8Bit_800600</STRONG> (ARM, 120 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft8Bit_800600
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[1d]"></a>BitmapViewTft1Bit_800600</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[1c]"></a>_PutTft1Bit_800600</STRONG> (ARM, 112 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft1Bit_800600
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[1b]"></a>BitmapViewTft24Bit_640480</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[1a]"></a>_PutTft24Bit_640480</STRONG> (ARM, 56 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft24Bit_640480
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[19]"></a>BitmapViewTft16Bit_800480</STRONG> (ARM, 104 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BitmapViewTft16Bit_800480
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[18]"></a>_PutTft16Bit_800480</STRONG> (ARM, 120 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft16Bit_800480
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[17]"></a>BitmapViewTft16Bit_640480</STRONG> (ARM, 104 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BitmapViewTft16Bit_640480
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[16]"></a>_PutTft16Bit_640480</STRONG> (ARM, 112 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft16Bit_640480
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[99]"></a>BitmapViewTft8Bit_640480</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[98]"></a>_PutTft8Bit_640480</STRONG> (ARM, 112 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft8Bit_640480
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>BitmapViewTft1Bit_640480</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>_PutTft1Bit_640480</STRONG> (ARM, 104 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft1Bit_640480
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>BitmapViewTft16Bit_240320</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>_PutTft16Bit_240320</STRONG> (ARM, 112 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft16Bit_240320
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[13]"></a>BitmapViewTft8Bit_240320</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[12]"></a>_PutTft8Bit_240320</STRONG> (ARM, 112 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutTft8Bit_240320
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[11]"></a>BitmapViewCstn12Bit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[10]"></a>_PutCstn12Bit</STRONG> (ARM, 524 bytes, Stack size 32 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = _PutCstn12Bit
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[95]"></a>BitmapViewCstn8Bit</STRONG> (ARM, 104 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BitmapViewCstn8Bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[94]"></a>_PutCstn8Bit</STRONG> (ARM, 112 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutCstn8Bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[93]"></a>BitmapViewStn4Bit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>_PutStn4Bit</STRONG> (ARM, 112 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutStn4Bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[91]"></a>BitmapViewStn2Bit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>_PutStn2Bit</STRONG> (ARM, 112 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutStn2Bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>BitmapViewStn1Bit</STRONG> (ARM, 4 bytes, Stack size 0 bytes, glib.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[8e]"></a>_PutStn1Bit</STRONG> (ARM, 104 bytes, Stack size 4 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _PutStn1Bit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> glib.o(.text)
</UL>
<P><STRONG><a name="[5f]"></a>Glib_Init</STRONG> (ARM, 676 bytes, Stack size 0 bytes, glib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_On
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit_On
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[65]"></a>Glib_Line</STRONG> (ARM, 888 bytes, Stack size 40 bytes, glib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Rectangle
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_FilledRectangle
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[64]"></a>Glib_Rectangle</STRONG> (ARM, 128 bytes, Stack size 32 bytes, glib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[62]"></a>Glib_FilledRectangle</STRONG> (ARM, 76 bytes, Stack size 32 bytes, glib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Glib_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[61]"></a>Glib_ClearScr</STRONG> (ARM, 432 bytes, Stack size 24 bytes, glib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Glib_ClearScr
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[b3]"></a>port_init</STRONG> (ARM, 160 bytes, Stack size 0 bytes, 2410lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[9c]"></a>uart_change_baud</STRONG> (ARM, 216 bytes, Stack size 40 bytes, 2410lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[5b]"></a>delay</STRONG> (ARM, 180 bytes, Stack size 16 bytes, 2410lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sendbyte
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Int_Frame
</UL>

<P><STRONG><a name="[9f]"></a>uart_init</STRONG> (ARM, 492 bytes, Stack size 64 bytes, 2410lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = uart_init &rArr; __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[b5]"></a>uart_select</STRONG> (ARM, 12 bytes, Stack size 0 bytes, 2410lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[128]"></a>uart_txempty</STRONG> (ARM, 96 bytes, Stack size 0 bytes, 2410lib.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>uart_getch</STRONG> (ARM, 152 bytes, Stack size 0 bytes, 2410lib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getstring
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
</UL>

<P><STRONG><a name="[129]"></a>uart_getkey</STRONG> (ARM, 164 bytes, Stack size 0 bytes, 2410lib.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>uart_sendbyte</STRONG> (ARM, 324 bytes, Stack size 8 bytes, 2410lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_sendbyte &rArr; delay &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getstring
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sendstring
</UL>

<P><STRONG><a name="[a1]"></a>uart_sendstring</STRONG> (ARM, 40 bytes, Stack size 8 bytes, 2410lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = uart_sendstring &rArr; uart_sendbyte &rArr; delay &rArr; __aeabi_idivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sendbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[5a]"></a>uart_printf</STRONG> (ARM, 64 bytes, Stack size 280 bytes, 2410lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392 + Unknown Stack Size
<LI>Call Chain = uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf (via Veneer)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sendstring
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_infor
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fiq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_abort_p
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_abort_d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_swi
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_undef
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_point
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getstring
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init_app
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MoveViewPort
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_800600
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_800600
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480_Hwswp
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_640480
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Bswp
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480_Palette
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_640480
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFi
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_IntFr
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_Bmp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320_On
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_16Bit_240320
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_8Bit_240320
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit_On
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_4Bit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_2Bit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Stn_1Bit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Int_Fifo
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_port_init
</UL>

<P><STRONG><a name="[a3]"></a>uart_getstring</STRONG> (ARM, 100 bytes, Stack size 16 bytes, 2410lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_sendbyte
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getch
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getintnum
</UL>

<P><STRONG><a name="[a4]"></a>uart_getintnum</STRONG> (ARM, 460 bytes, Stack size 64 bytes, 2410lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen (via Veneer)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getstring
</UL>

<P><STRONG><a name="[12a]"></a>timer_start</STRONG> (ARM, 60 bytes, Stack size 0 bytes, 2410lib.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>timer_stop</STRONG> (ARM, 32 bytes, Stack size 0 bytes, 2410lib.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>change_value_MPLL</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 2410lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[b1]"></a>change_clock_divider</STRONG> (ARM, 16 bytes, Stack size 0 bytes, 2410lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[12c]"></a>ChangeUPllValue</STRONG> (ARM, 24 bytes, Stack size 0 bytes, 2410lib.o(.text), UNUSED)

<P><STRONG><a name="[a9]"></a>EnableMMU</STRONG> (ARM, 36 bytes, Stack size 0 bytes, 2410lib.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMMU
</UL>

<P><STRONG><a name="[a8]"></a>InitMMU</STRONG> (ARM, 152 bytes, Stack size 8 bytes, 2410lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableMMU
</UL>

<P><STRONG><a name="[12d]"></a>__gccmain</STRONG> (ARM, 4 bytes, Stack size 0 bytes, 2410lib.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>break_point</STRONG> (ARM, 20 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = break_point &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fiq
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_abort_p
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_abort_d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_swi
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_undef
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.text)
</UL>
<P><STRONG><a name="[ab]"></a>debug_undef</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = debug_undef &rArr; break_point &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_point
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>debug_swi</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = debug_swi &rArr; break_point &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_point
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>debug_abort_d</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = debug_abort_d &rArr; break_point &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_point
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.text)
</UL>
<P><STRONG><a name="[ae]"></a>debug_abort_p</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sys_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_point
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>

<P><STRONG><a name="[af]"></a>debug_fiq</STRONG> (ARM, 48 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = debug_fiq &rArr; break_point &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;break_point
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>interrupts_init</STRONG> (ARM, 608 bytes, Stack size 0 bytes, sys_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[b6]"></a>beep_init</STRONG> (ARM, 56 bytes, Stack size 0 bytes, sys_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[b0]"></a>print_infor</STRONG> (ARM, 52 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = print_infor &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init
</UL>

<P><STRONG><a name="[82]"></a>sys_init</STRONG> (ARM, 132 bytes, Stack size 8 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = sys_init &rArr; print_infor &rArr; uart_printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_infor
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beep_init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;interrupts_init
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_clock_divider
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_value_MPLL
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_select
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>__rt_ctype_table</STRONG> (ARM, 24 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getintnum
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb (via Veneer)
</UL>

<P><STRONG><a name="[a2]"></a>__c89vsprintf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf (via Veneer)
</UL>

<P><STRONG><a name="[a6]"></a>atoi</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, atoi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getintnum (via Veneer)
</UL>

<P><STRONG><a name="[a5]"></a>strlen</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, strlen.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_getintnum (via Veneer)
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_idiv</STRONG> (ARM, 0 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_idivmod</STRONG> (ARM, 384 bytes, Stack size 8 bytes, aeabi_sdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Draw_Line
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Tft_1Bit_640480
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_12Bit
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit_On
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Test_Lcd_Cstn_8Bit
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
</UL>

<P><STRONG><a name="[12f]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__rt_locale</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[b8]"></a>__aeabi_errno_addr</STRONG> (ARM, 12 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol (via Veneer)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno (via Veneer)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul (via Veneer)
</UL>

<P><STRONG><a name="[132]"></a>__errno$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>__rt_errno_addr$intlibspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__read_errno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>

<P><STRONG><a name="[bb]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin (via Veneer)
</UL>

<P><STRONG><a name="[bc]"></a>_printf_pre_padding</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[be]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[c0]"></a>_printf_truncate_signed</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[c1]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[bf]"></a>_printf_str</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[33]"></a>_printf_int_dec</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d (via Veneer)
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i (via Veneer)
</UL>

<P><STRONG><a name="[29]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n (via Veneer)
</UL>

<P><STRONG><a name="[b7]"></a>_printf_char_common</STRONG> (Thumb, 34 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[21]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>_printf_wctomb</STRONG> (Thumb, 188 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[3b]"></a>_printf_longlong_dec</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu (via Veneer)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld (via Veneer)
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli (via Veneer)
</UL>

<P><STRONG><a name="[c8]"></a>_printf_longlong_oct</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[37]"></a>_printf_int_oct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o (via Veneer)
</UL>

<P><STRONG><a name="[3f]"></a>_printf_ll_oct</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo (via Veneer)
</UL>

<P><STRONG><a name="[c9]"></a>_printf_longlong_hex</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[39]"></a>_printf_int_hex</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x (via Veneer)
</UL>

<P><STRONG><a name="[41]"></a>_printf_ll_hex</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx (via Veneer)
</UL>

<P><STRONG><a name="[2b]"></a>_printf_hex_ptr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p (via Veneer)
</UL>

<P><STRONG><a name="[c4]"></a>__printf</STRONG> (Thumb, 406 bytes, Stack size 32 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r1
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[b9]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[134]"></a>__user_libspace</STRONG> (ARM, 12 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[dc]"></a>__user_perproc_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[135]"></a>__user_perthread_libspace</STRONG> (ARM, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>_ll_udiv10</STRONG> (ARM, 160 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[c3]"></a>_printf_int_common</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[136]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>_printf_fp_dec_real</STRONG> (Thumb, 626 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale (via Veneer)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify (via Veneer)
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10 (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec (via Veneer)
</UL>

<P><STRONG><a name="[d6]"></a>_printf_cs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_mbtowc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[43]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c (via Veneer)
</UL>

<P><STRONG><a name="[45]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>_printf_lcs_common</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wc (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[47]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc (via Veneer)
</UL>

<P><STRONG><a name="[49]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls (via Veneer)
</UL>

<P><STRONG><a name="[cd]"></a>_strtoul</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, _strtoul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[c6]"></a>_wcrtomb</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table (via Veneer)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r3
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[f1]"></a>strcmp</STRONG> (ARM, 156 bytes, Stack size 4 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[c2]"></a>__rt_udiv10</STRONG> (ARM, 44 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec (via Veneer)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>

<P><STRONG><a name="[50]"></a>__user_setup_stackheap</STRONG> (ARM, 96 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d5]"></a>_printf_fp_infnan</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_call_via_r2
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[da]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[cf]"></a>_btod_etento</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod (via Veneer)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[54]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit (via Veneer)
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[58]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit (via Veneer)
</UL>

<P><STRONG><a name="[137]"></a>__I$use$semihosting</STRONG> (ARM, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>__use_no_semihosting_swi</STRONG> (ARM, 4 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>__aeabi_uidiv</STRONG> (ARM, 0 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv), UNUSED)

<P><STRONG><a name="[5c]"></a>__aeabi_uidivmod</STRONG> (ARM, 36 bytes, Stack size 0 bytes, aeabi_sdiv.o(.text_udiv))
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div_large
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div2
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div5
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__arm_div8
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_PutCstn12Bit
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lcd_Int_Fifo
</UL>

<P><STRONG><a name="[13a]"></a>__semihosting_library_function</STRONG> (ARM, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[d0]"></a>_btod_d2e</STRONG> (ARM, 56 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[e5]"></a>_d2e_denorm_low</STRONG> (ARM, 84 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[e4]"></a>_d2e_norm_op1</STRONG> (ARM, 104 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[e6]"></a>__btod_div_common</STRONG> (ARM, 716 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e7]"></a>_e2e</STRONG> (ARM, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[d1]"></a>_btod_ediv</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[d2]"></a>_btod_emul</STRONG> (ARM, 52 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[e8]"></a>__btod_mult_common</STRONG> (ARM, 616 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[ca]"></a>__ARM_common_call_via_r1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, __printf.o(i.__ARM_common_call_via_r1))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[bd]"></a>__ARM_common_call_via_r2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_wctomb.o(i.__ARM_common_call_via_r2))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[db]"></a>__ARM_common_call_via_r3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _wcrtomb.o(i.__ARM_common_call_via_r3))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[d4]"></a>__ARM_fpclassify</STRONG> (ARM, 48 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[e9]"></a>__ieee754_rem_pio2</STRONG> (ARM, 1208 bytes, Stack size 128 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[ed]"></a>__kernel_cos</STRONG> (ARM, 404 bytes, Stack size 48 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[ee]"></a>__kernel_poly</STRONG> (ARM, 256 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[ef]"></a>__kernel_sin</STRONG> (ARM, 368 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
</UL>

<P><STRONG><a name="[f0]"></a>__mathlib_dbl_underflow</STRONG> (ARM, 20 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[cb]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[89]"></a>sin</STRONG> (ARM, 256 bytes, Stack size 112 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno (via Veneer)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
</UL>

<P><STRONG><a name="[20]"></a>_get_lc_ctype</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2 (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>_get_lc_numeric</STRONG> (ARM, 80 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2 (via Veneer)
</UL>

<P><STRONG><a name="[8d]"></a>__aeabi_d2f</STRONG> (ARM, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
</UL>

<P><STRONG><a name="[f2]"></a>_d2f</STRONG> (ARM, 108 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_dadd</STRONG> (ARM, 0 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_change_baud
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[f5]"></a>_dadd</STRONG> (ARM, 336 bytes, Stack size 16 bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[f8]"></a>__fpl_dcheck_NaN1</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_ddiv</STRONG> (ARM, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_change_baud
</UL>

<P><STRONG><a name="[fa]"></a>_ddiv</STRONG> (ARM, 600 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[8c]"></a>__aeabi_d2iz</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_change_baud
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
</UL>

<P><STRONG><a name="[fb]"></a>_dfix</STRONG> (ARM, 112 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9d]"></a>__aeabi_i2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_change_baud
</UL>

<P><STRONG><a name="[13b]"></a>_dflt</STRONG> (ARM, 88 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[fd]"></a>__dflt_normalise</STRONG> (ARM, 0 bytes, Stack size unknown bytes, dflt_noclz.o(x$fpl$dflt), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfltu
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_ui2d</STRONG> (ARM, 0 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[fc]"></a>_dfltu</STRONG> (ARM, 12 bytes, Stack size 0 bytes, dflt_noclz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dflt_normalise
</UL>

<P><STRONG><a name="[8a]"></a>__aeabi_dmul</STRONG> (ARM, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[fe]"></a>_dmul</STRONG> (ARM, 372 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f4]"></a>__fpl_dnaninf</STRONG> (ARM, 192 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[f7]"></a>__fpl_dretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_drsub</STRONG> (ARM, 0 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[ff]"></a>_drsb</STRONG> (ARM, 24 bytes, Stack size 8 bytes, daddsub_noclz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[ea]"></a>__aeabi_dsub</STRONG> (ARM, 0 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[101]"></a>_dsub</STRONG> (ARM, 576 bytes, Stack size 32 bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_f2d</STRONG> (ARM, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_lcd_test
</UL>

<P><STRONG><a name="[102]"></a>_f2d</STRONG> (ARM, 100 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[103]"></a>__fpl_fnaninf</STRONG> (ARM, 168 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[f3]"></a>__fpl_fretinf</STRONG> (ARM, 16 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[2]"></a>__ieee_status</STRONG> (ARM, 8 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits (via Veneer)
</UL>

<P><STRONG><a name="[2d]"></a>_printf_fp_dec</STRONG> (ARM, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[f9]"></a>__fpl_return_NaN</STRONG> (ARM, 116 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[ec]"></a>__ARM_scalbn</STRONG> (ARM, 104 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
</UL>

<P><STRONG><a name="[104]"></a>__fpl_cmpreturn</STRONG> (ARM, 60 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5]"></a>Undef_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Undef_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SWI_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>DAbt_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAbt_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>IRQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>FIQ_Handler</STRONG> (ARM, 4 bytes, Stack size unknown bytes, s3c2410a.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIQ_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> s3c2410a.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>__arm_div8</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[e1]"></a>__arm_div5</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[e0]"></a>__arm_div2</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[e3]"></a>__arm_div_large</STRONG> (ARM, 0 bytes, Stack size unknown bytes, aeabi_sdiv.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[100]"></a>_dadd1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[f6]"></a>_dsub1</STRONG> (ARM, 0 bytes, Stack size unknown bytes, daddsub_noclz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[22]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[ce]"></a>_fp_digits</STRONG> (Thumb, 414 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status (via Veneer)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul (via Veneer)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv (via Veneer)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e (via Veneer)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10 (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[de]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[31]"></a>_printf_fp_hex</STRONG> (Unknown, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[d7]"></a>_printf_mbtowc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[d9]"></a>_printf_wc</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<HR></body></html>
