; generated by ARM C/C++ Compiler, 5.03 [Build 24]
; commandline ArmCC [--list --debug -c --asm --interleave -o.\SDRAM\dotled.o --asm_dir=.\SDRAM\ --list_dir=.\SDRAM\ --depend=.\SDRAM\dotled.d --cpu=ARM920T --apcs=interwork -O0 -I..\Common\Inc -I.\Include -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\Inc\Samsung --omf_browse=.\SDRAM\dotled.crf Source\Dotled.c]
                          ARM

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  write_L4094 PROC
;;;51     *********************************************************************************************/
;;;52     void write_L4094(UINT16T data)
000000  e3a02456          MOV      r2,#0x56000000
;;;53     {
;;;54     	UINT8T i;     
;;;55     	Lstr_H;  
000004  e5922014          LDR      r2,[r2,#0x14]
000008  e3822010          ORR      r2,r2,#0x10
00000c  e3a03456          MOV      r3,#0x56000000
000010  e5832014          STR      r2,[r3,#0x14]
;;;56     	for(i=0;i<16;i++)
000014  e3a01000          MOV      r1,#0
000018  ea00001a          B        |L1.136|
                  |L1.28|
;;;57     	{
;;;58     		CLK_L;
00001c  e3a02456          MOV      r2,#0x56000000
000020  e5922034          LDR      r2,[r2,#0x34]
000024  e59f323c          LDR      r3,|L1.616|
000028  e0022003          AND      r2,r2,r3
00002c  e3a03456          MOV      r3,#0x56000000
000030  e5832034          STR      r2,[r3,#0x34]
;;;59             if(data & 0x01==1)
000034  e3100001          TST      r0,#1
000038  0a000004          BEQ      |L1.80|
;;;60     			Ldata_H;
00003c  e3a02456          MOV      r2,#0x56000000
000040  e5922024          LDR      r2,[r2,#0x24]
000044  e3822001          ORR      r2,r2,#1
000048  e5832024          STR      r2,[r3,#0x24]
00004c  ea000005          B        |L1.104|
                  |L1.80|
;;;61             else
;;;62              	Ldata_L;
000050  e3a02456          MOV      r2,#0x56000000
000054  e5922024          LDR      r2,[r2,#0x24]
000058  e59f320c          LDR      r3,|L1.620|
00005c  e0022003          AND      r2,r2,r3
000060  e3a03456          MOV      r3,#0x56000000
000064  e5832024          STR      r2,[r3,#0x24]
                  |L1.104|
;;;63             data = data >> 1;      
000068  e1a000c0          ASR      r0,r0,#1
;;;64             CLK_H;
00006c  e3a02456          MOV      r2,#0x56000000
000070  e5922034          LDR      r2,[r2,#0x34]
000074  e3822b01          ORR      r2,r2,#0x400
000078  e3a03456          MOV      r3,#0x56000000
00007c  e5832034          STR      r2,[r3,#0x34]
000080  e2812001          ADD      r2,r1,#1              ;56
000084  e20210ff          AND      r1,r2,#0xff           ;56
                  |L1.136|
000088  e3510010          CMP      r1,#0x10              ;56
00008c  baffffe2          BLT      |L1.28|
;;;65     	}
;;;66     	Lstr_L;
000090  e3a02456          MOV      r2,#0x56000000
000094  e5922014          LDR      r2,[r2,#0x14]
000098  e59f31d0          LDR      r3,|L1.624|
00009c  e0022003          AND      r2,r2,r3
0000a0  e3a03456          MOV      r3,#0x56000000
0000a4  e5832014          STR      r2,[r3,#0x14]
;;;67     }
0000a8  e12fff1e          BX       lr
;;;68     
                          ENDP

                  write_R4094 PROC
;;;76     *********************************************************************************************/
;;;77     void write_R4094(UINT8T data)
0000ac  e3a02456          MOV      r2,#0x56000000
;;;78     {
;;;79        UINT8T i;       
;;;80        Rstr_H;
0000b0  e5922064          LDR      r2,[r2,#0x64]
0000b4  e3822c01          ORR      r2,r2,#0x100
0000b8  e3a03456          MOV      r3,#0x56000000
0000bc  e5832064          STR      r2,[r3,#0x64]
;;;81        for(i = 0; i < 8; i++)
0000c0  e3a01000          MOV      r1,#0
0000c4  ea00001a          B        |L1.308|
                  |L1.200|
;;;82        {
;;;83     		CLK_L;
0000c8  e3a02456          MOV      r2,#0x56000000
0000cc  e5922034          LDR      r2,[r2,#0x34]
0000d0  e59f3190          LDR      r3,|L1.616|
0000d4  e0022003          AND      r2,r2,r3
0000d8  e3a03456          MOV      r3,#0x56000000
0000dc  e5832034          STR      r2,[r3,#0x34]
;;;84             if(data & 0x01==1)
0000e0  e3100001          TST      r0,#1
0000e4  0a000004          BEQ      |L1.252|
;;;85             	Rdata_H;
0000e8  e3a02456          MOV      r2,#0x56000000
0000ec  e5922024          LDR      r2,[r2,#0x24]
0000f0  e3822001          ORR      r2,r2,#1
0000f4  e5832024          STR      r2,[r3,#0x24]
0000f8  ea000005          B        |L1.276|
                  |L1.252|
;;;86             else
;;;87              	Rdata_L;
0000fc  e3a02456          MOV      r2,#0x56000000
000100  e5922024          LDR      r2,[r2,#0x24]
000104  e59f3160          LDR      r3,|L1.620|
000108  e0022003          AND      r2,r2,r3
00010c  e3a03456          MOV      r3,#0x56000000
000110  e5832024          STR      r2,[r3,#0x24]
                  |L1.276|
;;;88             data = data >> 1;      
000114  e1a000c0          ASR      r0,r0,#1
;;;89             CLK_H;
000118  e3a02456          MOV      r2,#0x56000000
00011c  e5922034          LDR      r2,[r2,#0x34]
000120  e3822b01          ORR      r2,r2,#0x400
000124  e3a03456          MOV      r3,#0x56000000
000128  e5832034          STR      r2,[r3,#0x34]
00012c  e2812001          ADD      r2,r1,#1              ;81
000130  e20210ff          AND      r1,r2,#0xff           ;81
                  |L1.308|
000134  e3510008          CMP      r1,#8                 ;81
000138  baffffe2          BLT      |L1.200|
;;;90     	}
;;;91     	Rstr_L;
00013c  e3a02456          MOV      r2,#0x56000000
000140  e5922064          LDR      r2,[r2,#0x64]
000144  e59f3128          LDR      r3,|L1.628|
000148  e0022003          AND      r2,r2,r3
00014c  e3a03456          MOV      r3,#0x56000000
000150  e5832064          STR      r2,[r3,#0x64]
;;;92     }
000154  e12fff1e          BX       lr
;;;93     
                          ENDP

                  led_char_disp PROC
;;;101    *********************************************************************************************/
;;;102    void led_char_disp(void)
000158  e92d40f0          PUSH     {r4-r7,lr}
;;;103    {
;;;104    	UINT8T i=0;
00015c  e3a04000          MOV      r4,#0
;;;105    	UINT8T j=2,k=0;
000160  e3a05002          MOV      r5,#2
000164  e3a06000          MOV      r6,#0
;;;106    	UINT16T x;
;;;107    
;;;108    	for(i = 0; i < 32; i++)
000168  e1a00000          MOV      r0,r0
00016c  ea000006          B        |L1.396|
                  |L1.368|
;;;109    		dispram[i] = ~l_display_array[i];
000170  e59f0100          LDR      r0,|L1.632|
000174  e7d00004          LDRB     r0,[r0,r4]
000178  e1e00000          MVN      r0,r0
00017c  e59f10f8          LDR      r1,|L1.636|
000180  e7c10004          STRB     r0,[r1,r4]
000184  e2840001          ADD      r0,r4,#1              ;108
000188  e20040ff          AND      r4,r0,#0xff           ;108
                  |L1.396|
00018c  e3540020          CMP      r4,#0x20              ;108
000190  bafffff6          BLT      |L1.368|
;;;110    	i=0;
000194  e3a04000          MOV      r4,#0
;;;111    	while(i < 16)
000198  ea00002e          B        |L1.600|
                  |L1.412|
;;;112    	{
;;;113    		Rstr_L;										// Enable RSTR
00019c  e3a00456          MOV      r0,#0x56000000
0001a0  e5900064          LDR      r0,[r0,#0x64]
0001a4  e59f10c8          LDR      r1,|L1.628|
0001a8  e0000001          AND      r0,r0,r1
0001ac  e3a01456          MOV      r1,#0x56000000
0001b0  e5810064          STR      r0,[r1,#0x64]
;;;114    		Lstr_L;										// Enable LSTR
0001b4  e3a00456          MOV      r0,#0x56000000
0001b8  e5900014          LDR      r0,[r0,#0x14]
0001bc  e59f10ac          LDR      r1,|L1.624|
0001c0  e0000001          AND      r0,r0,r1
0001c4  e3a01456          MOV      r1,#0x56000000
0001c8  e5810014          STR      r0,[r1,#0x14]
;;;115    		DisEn_Dataout;								// lock the data
0001cc  e3a00456          MOV      r0,#0x56000000
0001d0  e5900014          LDR      r0,[r0,#0x14]
0001d4  e59f10a4          LDR      r1,|L1.640|
0001d8  e0000001          AND      r0,r0,r1
0001dc  e3a01456          MOV      r1,#0x56000000
0001e0  e5810014          STR      r0,[r1,#0x14]
;;;116    
;;;117    		do {   										// Write the row data
0001e4  e1a00000          MOV      r0,r0
                  |L1.488|
;;;118    			j--;
0001e8  e2450001          SUB      r0,r5,#1
0001ec  e20050ff          AND      r5,r0,#0xff
;;;119    			write_R4094(dispram[i * 2 + j]);
0001f0  e0851084          ADD      r1,r5,r4,LSL #1
0001f4  e59f2080          LDR      r2,|L1.636|
0001f8  e7d20001          LDRB     r0,[r2,r1]
0001fc  ebfffffe          BL       write_R4094
;;;120    		}while(j);
000200  e3550000          CMP      r5,#0
000204  1afffff7          BNE      |L1.488|
;;;121    
;;;122    		x=~(0x8000 >> i);	   						// Write one list data
000208  e3a00902          MOV      r0,#0x8000
00020c  e1e00450          MVN      r0,r0,ASR r4
000210  e1a07800          LSL      r7,r0,#16
000214  e1a07827          LSR      r7,r7,#16
;;;123    		write_L4094(x);
000218  e1a00007          MOV      r0,r7
00021c  ebfffffe          BL       write_L4094
;;;124    
;;;125    		En_Dataout;									// Output the data
000220  e3a00456          MOV      r0,#0x56000000
000224  e5900014          LDR      r0,[r0,#0x14]
000228  e3800020          ORR      r0,r0,#0x20
00022c  e3a01456          MOV      r1,#0x56000000
000230  e5810014          STR      r0,[r1,#0x14]
;;;126    
;;;127    		for(k = 0;k < 250; k++);
000234  e3a06000          MOV      r6,#0
000238  ea000001          B        |L1.580|
                  |L1.572|
00023c  e2860001          ADD      r0,r6,#1
000240  e20060ff          AND      r6,r0,#0xff
                  |L1.580|
000244  e35600fa          CMP      r6,#0xfa
000248  bafffffb          BLT      |L1.572|
;;;128    
;;;129    		i++;
00024c  e2840001          ADD      r0,r4,#1
000250  e20040ff          AND      r4,r0,#0xff
;;;130    		j = 2;
000254  e3a05002          MOV      r5,#2
                  |L1.600|
000258  e3540010          CMP      r4,#0x10              ;111
00025c  baffffce          BLT      |L1.412|
;;;131    
;;;132    	}
;;;133    }
000260  e8bd40f0          POP      {r4-r7,lr}
000264  e12fff1e          BX       lr
                          ENDP

                  |L1.616|
                          DCD      0x0000fbff
                  |L1.620|
                          DCD      0x0000fffe
                  |L1.624|
                          DCD      0x0000ffef
                  |L1.628|
                          DCD      0x0000feff
                  |L1.632|
                          DCD      l_display_array
                  |L1.636|
                          DCD      dispram
                  |L1.640|
                          DCD      0x0000ffdf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  dispram
                          %        32

                          AREA ||.data||, DATA, ALIGN=0

                  bmp
000000  bfffd801          DCB      0xbf,0xff,0xd8,0x01
000004  dbfbfedf          DCB      0xdb,0xfb,0xfe,0xdf
000008  7ee7a9f7          DCB      0x7e,0xe7,0xa9,0xf7
00000c  afbfefbf          DCB      0xaf,0xbf,0xef,0xbf
000010  d803dfbf          DCB      0xd8,0x03,0xdf,0xbf
000014  3f1fbea7          DCB      0x3f,0x1f,0xbe,0xa7
000018  b9b1a7bb          DCB      0xb9,0xb1,0xa7,0xbb
00001c  bfbfbfbf          DCB      0xbf,0xbf,0xbf,0xbf
000020  ffffedfb          DCB      0xff,0xff,0xed,0xfb
000024  edbbedbb          DCB      0xed,0xbb,0xed,0xbb
000028  01bbedbb          DCB      0x01,0xbb,0xed,0xbb
00002c  edbbedbb          DCB      0xed,0xbb,0xed,0xbb
000030  edbbedbb          DCB      0xed,0xbb,0xed,0xbb
000034  c5bb3bbb          DCB      0xc5,0xbb,0x3b,0xbb
000038  fbbbf7fb          DCB      0xfb,0xbb,0xf7,0xfb
00003c  effbffff          DCB      0xef,0xfb,0xff,0xff
000040  fbdffbdf          DCB      0xfb,0xdf,0xfb,0xdf
000044  0001fbdf          DCB      0x00,0x01,0xfb,0xdf
000048  feffe00f          DCB      0xfe,0xff,0xe0,0x0f
00004c  eeefeeef          DCB      0xee,0xef,0xee,0xef
000050  eeef0001          DCB      0xee,0xef,0x00,0x01
000054  fefffd7f          DCB      0xfe,0xff,0xfd,0x7f
000058  fbbff7cf          DCB      0xfb,0xbf,0xf7,0xcf
00005c  efe3dff7          DCB      0xef,0xe3,0xdf,0xf7
000060  fbbffbbf          DCB      0xfb,0xbf,0xfb,0xbf
000064  0001fbbf          DCB      0x00,0x01,0xfb,0xbf
000068  efbfe003          DCB      0xef,0xbf,0xe0,0x03
00006c  cdef9edf          DCB      0xcd,0xef,0x9e,0xdf
000070  5001dfff          DCB      0x50,0x01,0xdf,0xff
000074  dc07ddf7          DCB      0xdc,0x07,0xdd,0xf7
000078  ddf7dc07          DCB      0xdd,0xf7,0xdc,0x07
00007c  ddf7ffff          DCB      0xdd,0xf7,0xff,0xff
000080  efbfefbf          DCB      0xef,0xbf,0xef,0xbf
000084  ac03afbf          DCB      0xac,0x03,0xaf,0xbf
000088  83bf6801          DCB      0x83,0xbf,0x68,0x01
00008c  efefe3ef          DCB      0xef,0xef,0xe3,0xef
000090  cc012fef          DCB      0xcc,0x01,0x2f,0xef
000094  eeefef6f          DCB      0xee,0xef,0xef,0x6f
000098  ef6fefef          DCB      0xef,0x6f,0xef,0xef
00009c  efafefdf          DCB      0xef,0xaf,0xef,0xdf
0000a0  f77ff39f          DCB      0xf7,0x7f,0xf3,0x9f
0000a4  e7bfe801          DCB      0xe7,0xbf,0xe8,0x01
0000a8  cfffcc07          DCB      0xcf,0xff,0xcc,0x07
0000ac  afff6c07          DCB      0xaf,0xff,0x6c,0x07
0000b0  efffec07          DCB      0xef,0xff,0xec,0x07
0000b4  edf7edf7          DCB      0xed,0xf7,0xed,0xf7
0000b8  edf7ec07          DCB      0xed,0xf7,0xec,0x07
0000bc  edf7ffff          DCB      0xed,0xf7,0xff,0xff
0000c0  fefffdff          DCB      0xfe,0xff,0xfd,0xff
0000c4  e00fefef          DCB      0xe0,0x0f,0xef,0xef
0000c8  e00fefef          DCB      0xe0,0x0f,0xef,0xef
0000cc  e00fefef          DCB      0xe0,0x0f,0xef,0xef
0000d0  e00fffff          DCB      0xe0,0x0f,0xff,0xff
0000d4  f6ffd77b          DCB      0xf6,0xff,0xd7,0x7b
0000d8  d76d97ed          DCB      0xd7,0x6d,0x97,0xed
0000dc  f80fffff          DCB      0xf8,0x0f,0xff,0xff
0000e0  efdfefdf          DCB      0xef,0xdf,0xef,0xdf
0000e4  efdf0201          DCB      0xef,0xdf,0x02,0x01
0000e8  efdfebdf          DCB      0xef,0xdf,0xeb,0xdf
0000ec  e603cef7          DCB      0xe6,0x03,0xce,0xf7
0000f0  2f77ef6f          DCB      0x2f,0x77,0xef,0x6f
0000f4  ef9fef9f          DCB      0xef,0x9f,0xef,0x9f
0000f8  ef6feef1          DCB      0xef,0x6f,0xee,0xf1
0000fc  a9fbdfff          DCB      0xa9,0xfb,0xdf,0xff
000100  fefffedf          DCB      0xfe,0xff,0xfe,0xdf
000104  feeffeff          DCB      0xfe,0xef,0xfe,0xff
000108  0001feff          DCB      0x00,0x01,0xfe,0xff
00010c  fc7ffabf          DCB      0xfc,0x7f,0xfa,0xbf
000110  fadff6ef          DCB      0xfa,0xdf,0xf6,0xef
000114  eee7def1          DCB      0xee,0xe7,0xde,0xf1
000118  3efbfeff          DCB      0x3e,0xfb,0xfe,0xff
00011c  feffffff          DCB      0xfe,0xff,0xff,0xff
000120  fefffeff          DCB      0xfe,0xff,0xfe,0xff
000124  8001fdff          DCB      0x80,0x01,0xfd,0xff
000128  fbfff00f          DCB      0xfb,0xff,0xf0,0x0f
00012c  e7efd7ef          DCB      0xe7,0xef,0xd7,0xef
000130  b00f77ef          DCB      0xb0,0x0f,0x77,0xef
000134  f7eff00f          DCB      0xf7,0xef,0xf0,0x0f
000138  f7eff76f          DCB      0xf7,0xef,0xf7,0x6f
00013c  f78ff7df          DCB      0xf7,0x8f,0xf7,0xdf
000140  ffff0407          DCB      0xff,0xff,0x04,0x07
000144  6df76c07          DCB      0x6d,0xf7,0x6c,0x07
000148  5df75df7          DCB      0x5d,0xf7,0x5d,0xf7
00014c  6c07757f          DCB      0x6c,0x07,0x75,0x7f
000150  75b755af          DCB      0x75,0xb7,0x55,0xaf
000154  6ddf7ddf          DCB      0x6d,0xdf,0x7d,0xdf
000158  7def7d71          DCB      0x7d,0xef,0x7d,0x71
00015c  7cfb7dff          DCB      0x7c,0xfb,0x7d,0xff
000160  fffffbbf          DCB      0xff,0xff,0xfb,0xbf
000164  f9bffbbf          DCB      0xf9,0xbf,0xfb,0xbf
000168  f7dff7ef          DCB      0xf7,0xdf,0xf7,0xef
00016c  efe7ddf1          DCB      0xef,0xe7,0xdd,0xf1
000170  bcfbfdff          DCB      0xbc,0xfb,0xfd,0xff
000174  fbdff7ef          DCB      0xfb,0xdf,0xf7,0xef
000178  ee07c0e7          DCB      0xee,0x07,0xc0,0xe7
00017c  efefffff          DCB      0xef,0xef,0xff,0xff
000180  ffffc003          DCB      0xff,0xff,0xc0,0x03
000184  fffbfffb          DCB      0xff,0xfb,0xff,0xfb
000188  801bfffb          DCB      0x80,0x1b,0xff,0xfb
00018c  fffbc03b          DCB      0xff,0xfb,0xc0,0x3b
000190  dfbbdfbb          DCB      0xdf,0xbb,0xdf,0xbb
000194  c03bdfbb          DCB      0xc0,0x3b,0xdf,0xbb
000198  dffbffeb          DCB      0xdf,0xfb,0xff,0xeb
00019c  fff7ffff          DCB      0xff,0xf7,0xff,0xff
0001a0  f83fe7cf          DCB      0xf8,0x3f,0xe7,0xcf
0001a4  dff7bffb          DCB      0xdf,0xf7,0xbf,0xfb
0001a8  b39b739d          DCB      0xb3,0x9b,0x73,0x9d
0001ac  7ffd7ffd          DCB      0x7f,0xfd,0x7f,0xfd
0001b0  6fed67cd          DCB      0x6f,0xed,0x67,0xcd
0001b4  b39bb83b          DCB      0xb3,0x9b,0xb8,0x3b
0001b8  dff7e7cf          DCB      0xdf,0xf7,0xe7,0xcf
0001bc  f83fffff          DCB      0xf8,0x3f,0xff,0xff
                  cTemp
0001c0  00                DCB      0x00
                  cEnChange0
0001c1  00                DCB      0x00
                  cEnChange1
0001c2  00                DCB      0x00
